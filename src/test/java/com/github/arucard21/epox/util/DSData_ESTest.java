/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:07:05 GMT 2018
 */

package com.github.arucard21.epox.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.arucard21.epox.util.DSData;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DSData_ESTest extends DSData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DSData dSData0 = new DSData("k?\"!^d()NC$fgbd=", "\u0001", false);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.addElement(dSData0);
      String string0 = DSData.encode(vector0);
      assertEquals("[#k?\"!^d()NC$fgbd=\u0001\u0001]", vector0.toString());
      assertEquals("#k?\"!^d()NC$fgbd=\u0001\u0001\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = DSData.decode(vector0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DSData dSData0 = new DSData("", "", false);
      dSData0.sel = null;
      // Undeclared exception!
      try { 
        dSData0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.DSData", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DSData.parse((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add((String) null);
      // Undeclared exception!
      try { 
        DSData.encode(vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.DSData", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "");
      // Undeclared exception!
      try { 
        DSData.encode(vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.github.arucard21.epox.util.DSData
         //
         verifyException("com.github.arucard21.epox.util.DSData", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        DSData.decode(vector0, "2:=gpqLke");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        DSData.decode((Vector) null, "U?1gu`L55ZqC@1}|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.DSData", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DSData dSData0 = DSData.parse("\u0000", "\u0000");
      assertNotNull(dSData0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      DSData.decode(vector0, ";\u0001;");
      String string0 = DSData.encode(vector0);
      assertFalse(vector0.isEmpty());
      assertEquals(";\u0001;\u0001", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      String string0 = DSData.encode(vector0);
      assertFalse(vector0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      DSData.decode(vector0, "#\u0001\u0000");
      String string0 = DSData.encode(vector0);
      assertFalse(vector0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DSData dSData0 = DSData.parse("#", "");
      assertNotNull(dSData0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DSData dSData0 = new DSData("", "", false);
      String string0 = dSData0.toString();
      assertEquals("#\u0001\\0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DSData dSData0 = DSData.parse("", "#");
      dSData0.dst = "b";
      dSData0.dst = "";
      String string0 = dSData0.toString();
      assertEquals("\u0001\\0", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DSData dSData0 = DSData.parse("", "#");
      String string0 = dSData0.toString();
      assertEquals("\u0001#", string0);
  }
}
