/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:02:52 GMT 2018
 */

package com.github.arucard21.epox.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.arucard21.epox.util.U;
import java.util.HashMap;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class U_ESTest extends U_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      U.dehtmlize((String) null);
      U u0 = new U();
      U.htmldesc("Wbv\"=B`RJ=6Qb&#o^t&");
      U.out((Object) null);
      String string1 = "";
      try { 
        U.i("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 8L;
      String string0 = U.sbyte(8L);
      assertEquals("8.00  B", string0);
      assertNotNull(string0);
      
      String string1 = "C'eWyzO)g";
      String string2 = U.replace(" ", "C'eWyzO)g", " ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = U.replaceCCCode("xwmx2Ut)))m2?`", (HashMap) null);
      assertEquals("xwmx2Ut)))m2?`", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "null";
      String string5 = U.n("null");
      assertNull(string5);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string6 = U.sbyte(1776L);
      assertEquals("1.73 KB", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      // Undeclared exception!
      U.replace("dUQCdKu[n=_T8+1Q^", "", "`X>pWu");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = (-1334L);
      String string0 = U.sbyte((-1334L));
      assertEquals("-1334.00  B", string0);
      assertNotNull(string0);
      
      boolean boolean0 = U.alfanum("null");
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(3L);
      String string1 = U.sbyte((-1334L));
      assertEquals("-1334.00  B", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = U.alfanum("-1334.00  B");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = U.n("-1334.00  B");
      assertEquals("-1334.00  B", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        U.split((String) null, '{');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = U.sbyte(0L);
      assertEquals("0.00  B", string0);
      assertNotNull(string0);
      
      char char0 = '0';
      String[] stringArray0 = U.split("0.00  B", '0');
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      System.setCurrentTimeMillis(0L);
      String string1 = U.time();
      assertEquals("00:00:00", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "uS";
      try { 
        U.i("uS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"uS\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/*6yU?.Q");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "18Z");
      assertTrue(boolean0);
      
      boolean boolean1 = U.alfanum("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = U.htmldesc("sZ4]6Eqhj4^O:W$");
      assertEquals("sZ4]6Eqhj4^O:W$", string0);
      assertNotNull(string0);
      
      String string1 = U.fileToString("/*6yU?.Q");
      assertEquals("18Z", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = U.n(" ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      U.err(" ");
      U.err((Object) null);
      String string3 = U.sbyte(89L);
      assertEquals("89.00  B", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = U.n("18Z");
      assertEquals("18Z", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = U.dehtmlize("/*6yU?.Q");
      assertEquals("/*6yU?.Q", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string6 = U.replaceCCCode("sZ4]6Eqhj4^O:W$", hashMap0);
      assertEquals("sZ4]6Eqhj4^O:W$", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = U.n("+M#pDvuU@*vxdnu");
      assertEquals("+M#pDvuU@*vxdnu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = U.split("+M#pDvuU@*vxdnu", 'p');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = U.time();
      assertEquals("20:21:21", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = U.dehtmlize("+M#pDvuU@*vxdnu");
      assertEquals("+M#pDvuU@*vxdnu", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = U.replace("k?fi0jz9`]m3F\"", "20:21:21", "+M#pDvuU@*vxdnu");
      assertEquals("k?fi0jz9`]m3F\"", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = U.alfanum("k?fi0jz9`]m3F\"");
      assertFalse(boolean0);
      
      String string4 = U.n("]j)-BEK!0ryx.[v_LXo");
      assertEquals("]j)-BEK!0ryx.[v_LXo", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = U.fileToString("");
      assertNull(string5);
      
      String[] stringArray1 = U.split("`)PKT:_h*Uhxd46uB", 'Q');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      U u0 = new U();
      assertNotNull(u0);
      
      String string6 = U.n((String) null);
      assertNull(string6);
      
      String string7 = U.time();
      assertEquals("20:21:21", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      
      try { 
        U.i("+M#pDvuU@*vxdnu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"+M#pDvuU@*vxdnu\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = U.split("Dj8+JbEm<eUaA,'Us", '8');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      U.err("Dj8+JbEm<eUaA,'Us");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer((-1082));
      assertEquals((-1082), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1082));
      assertEquals((-1082), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertNull(integer2);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string0 = U.replaceCCCode("Dj8+JbEm<eUaA,'Us", hashMap0);
      assertEquals("Dj8+JbEm<eUaA,'Us", string0);
      assertNotNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = U.dehtmlize("Z|$s)JpSg]0J6s#s>_z");
      assertEquals("Z|$s)JpSg]0J6s#s_z", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      U u0 = new U();
      assertNotNull(u0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = U.time();
      assertEquals("20:21:21", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = U.split("diHr3:U3?-@F[", '*');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      U.err("diHr3:U3?-@F[");
      boolean boolean0 = U.alfanum("20:21:21");
      assertFalse(boolean0);
      
      String string1 = U.getInTag("20:21:21", "diHr3:U3?-@F[");
      assertNull(string1);
      
      String string2 = U.getInTag("xF)^{+", "`}g32 )G:Cq6<>q%S6b");
      assertNull(string2);
      
      String string3 = U.htmldesc("20:21:21");
      assertEquals("20:21:21", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      
      String string4 = U.n("3z7CjUvmw N3");
      assertEquals("3z7CjUvmw N3", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = U.fileToString("20:21:21");
      assertNull(string5);
      
      String string6 = U.n("`}g32 )G:Cq6<>q%S6b");
      assertEquals("`}g32 )G:Cq6<>q%S6b", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string7 = U.replaceCCCode("`}g32 )G:Cq6<>q%S6b", hashMap0);
      assertEquals("`}g32 )G:Cq6<>q%S6b", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(746);
      assertEquals(746, (int)integer0);
      assertNotNull(integer0);
      
      U.err(integer0);
      String string0 = null;
      // Undeclared exception!
      try { 
        U.alfanum((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = U.n("0.00");
      assertEquals("0.00", string0);
      assertNotNull(string0);
      
      String string1 = U.replace("", "0.00", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = U.dehtmlize("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = U.dehtmlize("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      U u0 = new U();
      assertNotNull(u0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-1918));
      assertEquals((-1918), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("", integer0);
      assertNull(integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put(" ", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string0 = U.replaceCCCode("", hashMap0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = U.dehtmlize((String) null);
      assertNull(string1);
      
      U.err(";C");
      String string2 = U.htmldesc(";C");
      assertEquals(";C", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = U.time();
      assertEquals("20:21:21", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = U.dehtmlize("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = U.n("");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = U.sbyte(1988L);
      assertEquals("1.94 KB", string0);
      assertNotNull(string0);
      
      String string1 = U.sbyte(1988L);
      assertEquals("1.94 KB", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string2 = U.replaceCCCode("1.94 KB", hashMap0);
      assertEquals("1.94 KB", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        U.fileToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      U.err(object0);
      String string0 = U.dehtmlize((String) null);
      assertNull(string0);
      
      try { 
        U.i((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "V6aLL3,MROrw4$a)`X";
      String string1 = U.n("V6aLL3,MROrw4$a)`X");
      assertEquals("V6aLL3,MROrw4$a)`X", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = U.time();
      assertEquals("20:21:21", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = U.time();
      assertEquals("20:21:21", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = null;
      String string5 = U.getInTag("V6aLL3,MROrw4$a)`X", (String) null);
      assertNull(string5);
      
      U u0 = new U();
      assertNotNull(u0);
      
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        U.replaceCCCode((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      String string1 = U.dehtmlize("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = U.time();
      assertEquals("20:21:21", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = U.n("waYj");
      assertEquals("waYj", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = U.n("");
      assertNull(string4);
      
      // Undeclared exception!
      U.replace("", "", "b)k*D%9");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = U.alfanum("sh~tiQ})c");
      assertFalse(boolean0);
      
      String string0 = U.sbyte(0L);
      assertEquals("0.00  B", string0);
      assertNotNull(string0);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = hashMap0.replace((Object) "0.00  B", "", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = hashMap0.put(object0, "0.00  B");
      assertNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string2 = U.replaceCCCode("0.00  B", hashMap0);
      assertEquals("0.00  B", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string3 = U.time();
      assertEquals("20:21:21", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        U.replace((String) null, "20:21:21", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = U.n("");
      assertNull(string0);
      
      char char0 = '2';
      String[] stringArray0 = U.split("B", '2');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      U.err(object0);
      String string1 = "";
      String string2 = U.dehtmlize("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      U.err(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      String string3 = U.replace("JHbC8#npf>12,t", "B", "JFEVwzXmHJTp[n");
      assertEquals("JHbC8#npf>12,t", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        U.split((String) null, '2');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = U.replaceCCCode("y5r4i/w>qxcV|SW&>V", (HashMap) null);
      assertEquals("y5r4i/w>qxcV|SW&>V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = U.dehtmlize("9]<6");
      assertEquals("9]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      U.err("^[a-zA-Z0-9-_]{3,16}$");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = U.n((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        U.replaceCCCode((String) null, (HashMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = U.split("~WtFlUwuH", 'K');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = U.fileToString("m");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = U.htmldesc("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = U.sbyte((-1L));
      assertEquals("-1.00  B", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = U.sbyte((-228L));
      assertEquals("-228.00  B", string0);
      assertNotNull(string0);
      
      String string1 = U.sbyte(0L);
      assertEquals("0.00  B", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = U.replace("p#x)7C77", "-228.00  B", "0.00");
      assertEquals("p#x)7C77", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      U u0 = new U();
      assertNotNull(u0);
      
      String string3 = U.fileToString("-228.00  B");
      assertNull(string3);
      
      String string4 = U.htmldesc((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = U.htmldesc("B[%6");
      assertEquals("B[%6", string0);
      assertNotNull(string0);
      
      String string1 = U.getInTag("W", "B[%6");
      assertNull(string1);
      
      String string2 = U.getInTag("", "W");
      assertNull(string2);
      
      String string3 = U.fileToString("W");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      String string1 = U.fileToString("");
      assertNull(string1);
      
      boolean boolean0 = U.alfanum("");
      assertFalse(boolean0);
      
      String string2 = U.htmldesc("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = "";
      // Undeclared exception!
      try { 
        U.getInTag((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = null;
      try { 
        U.i((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = U.getInTag("V*nfW)/XB?)I$", "V*nfW)/XB?)I$");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = U.sbyte(1L);
      assertEquals("1.00  B", string0);
      assertNotNull(string0);
      
      boolean boolean0 = U.alfanum("1.00  B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      U u0 = new U();
      assertNotNull(u0);
      
      String[] stringArray0 = U.split("", 'P');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = U.n("com.github.arucard21.epox.util.U");
      assertEquals("com.github.arucard21.epox.util.U", string0);
      assertNotNull(string0);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = U.replaceCCCode("", hashMap0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = U.n("");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        U.getInTag((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-388));
      assertEquals((-388), (int)integer0);
      assertNotNull(integer0);
      
      U.out(integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = U.dehtmlize((String) null);
      assertNull(string0);
      
      String string1 = U.n((String) null);
      assertNull(string1);
      
      try { 
        U.i((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "3z7cjUvmw |;";
      try { 
        U.i("3z7cjUvmw |;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3z7cjUvmw |;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      String string0 = U.htmldesc(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = U.split(" ", 's');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string1 = U.replaceCCCode("SI5entJ91,", hashMap0);
      assertEquals("SI5entJ91,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string2 = U.dehtmlize(" ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = U.replace(" ", " ", "null");
      assertEquals("null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      System.setCurrentTimeMillis(3L);
      String string4 = U.fileToString("null");
      assertNull(string4);
      
      System.setCurrentTimeMillis(3L);
      String string5 = U.time();
      assertEquals("00:00:00", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = U.htmldesc("}\"46*qc1MrV");
      assertEquals("}\"46*qc1MrV", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = U.n("null");
      assertNull(string7);
      
      String string8 = U.htmldesc((String) null);
      assertNull(string8);
      
      String string9 = U.sbyte((-2970L));
      assertEquals("-2970.00  B", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      
      String[] stringArray1 = U.split("c7T){=h %", 's');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      try { 
        U.i((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      assertFalse(boolean0);
      
      String string0 = U.sbyte(3L);
      assertEquals("3.00  B", string0);
      assertNotNull(string0);
      
      String string1 = U.n("3.00  B");
      assertEquals("3.00  B", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = U.htmldesc("3.00  B");
      assertEquals("3.00  B", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = U.split("3.00  B", '=');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = U.split("<LrH\"MD;#l`&xK[H", '=');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = U.n("3.00  B");
      assertEquals("3.00  B", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = U.sbyte(1L);
      assertEquals("1.00  B", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      System.setCurrentTimeMillis(1L);
      String string5 = U.replace("`}g32 )G:Cq6<>q%S6b", "xCfVjVZhi:s", "com.github.arucard21.epox.util.U");
      assertEquals("`}g32 )G:Cq6<>q%S6b", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = U.dehtmlize("3z7CjUvmw N3");
      assertEquals("3z7CjUvmw N3", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string7 = U.replaceCCCode("ia}B&a\"%qz=qODS", hashMap0);
      assertEquals("ia}B&a\"%qz=qODS", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string8 = U.dehtmlize("^[a-zA-Z0-9-_]{3,16}$");
      assertEquals("^[a-zA-Z0-9-_]{3,16}$", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = U.n("KXF) !.X");
      assertEquals("KXF) !.X", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      
      String string10 = U.getInTag("C!}r+3P2z~<", "^[a-zA-Z0-9-_]{3,16}$");
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "y[V&bT*d2~>8q7<hO^:";
      String string1 = "! ";
      String string2 = U.replace("y[V&bT*d2~>8q7<hO^:", "y[V&bT*d2~>8q7<hO^:", "! ");
      assertEquals("! ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      U u0 = new U();
      assertNotNull(u0);
      
      String string3 = U.htmldesc("y[V&bT*d2~>8q7<hO^:");
      assertEquals("y[V&bT*d2~>8q7<hO^:", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = U.time();
      assertEquals("20:21:21", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = U.replace("! ", "! ", "! ");
      assertEquals("! ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      try { 
        U.i("y[V&bT*d2~>8q7<hO^:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y[V&bT*d2~>8q7<hO^:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":4P:fa");
      assertFalse(boolean0);
      
      String string0 = U.time();
      assertEquals("20:21:21", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = U.split("20:21:21", '{');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      U.out(object0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object object1 = hashMap0.put(object0, "");
      assertNull(object1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      hashMap0.forEach(biConsumer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string0 = U.replaceCCCode("", hashMap0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = U.fileToString("");
      assertNull(string1);
      
      String string2 = U.sbyte(0L);
      assertEquals("0.00  B", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = U.htmldesc("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = U.htmldesc("0.00  B");
      assertEquals("0.00  B", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = U.time();
      assertEquals("20:21:21", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = U.getInTag(")0utALG'n ~oe", "R%juHj^C5");
      assertNull(string6);
      
      String string7 = U.dehtmlize("");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      
      U u0 = new U();
      assertNotNull(u0);
      
      String string8 = U.sbyte(1048576L);
      assertEquals("1.00 MB", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        U.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = null;
      U u0 = new U();
      assertNotNull(u0);
      
      String string1 = U.htmldesc("Wbv\"=B`RJ=6Qb&#o^t&");
      assertEquals("Wbv\"=B`RJ=6Qb&#o^t&", string1);
      assertNotNull(string1);
      
      String string2 = "";
      try { 
        U.i("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      U.alfanum("b3t;ao");
      U.out("b3t;ao");
      U.dehtmlize("b3t;ao");
      U.htmldesc("b3t;ao");
      U.htmldesc("b3t;ao");
      String string0 = null;
      // Undeclared exception!
      try { 
        U.alfanum((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      U.n((String) null);
      U u0 = new U();
      U.err(u0);
      U.htmldesc((String) null);
      U.out((Object) null);
      String string1 = "v]xdbijzK[0C|@";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        U.getInTag((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = U.split("diHr3:U3?-@F[", ':');
      assertEquals(2, stringArray0.length);
      
      U.err("diHr3:U3?-@F[");
      String string0 = U.htmldesc("diHr3:U3?-@F[");
      assertEquals("diHr3:U3?-@F[", string0);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string1 = U.replaceCCCode("`}g32 )G:Cq6<>q%S6b", hashMap0);
      assertEquals("`}g32 )G:Cq6<>q%S6b", string1);
      
      String string2 = U.dehtmlize("`}g32 )G:Cq6<>q%S6b");
      assertEquals("`}g32 )G:Cq6q%S6b", string2);
      
      String string3 = U.htmldesc("||V`Y]70D}H=A8*");
      assertEquals("||V`Y]70D}H=A8*", string3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      U.htmldesc("");
      String string0 = "";
      U.n("");
      U.sbyte(177L);
      U.n("oaOH5Dtrq");
      U.time();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-47));
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, (Object) null);
      // Undeclared exception!
      try { 
        U.replaceCCCode((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.U", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      U.out((Object) null);
      String string0 = U.sbyte(3526L);
      assertEquals("3.44 KB", string0);
      
      U.htmldesc("");
      U.getInTag("4vN('Z mQhQ,M6", "");
      String string1 = U.dehtmlize("4vN('Z mQhQ,M6");
      assertEquals("4vN('Z mQhQ,M6", string1);
      
      String string2 = U.htmldesc("Y*PL s=e$");
      assertEquals("Y*PL s=e$", string2);
      assertNotNull(string2);
      
      String string3 = U.dehtmlize("<,m]_zXkG=5k$0+2");
      assertNotNull(string3);
      assertEquals("", string3);
  }
}
