/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:03:33 GMT 2018
 */

package com.github.arucard21.epox.webaom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.arucard21.epox.webaom.Job;
import com.github.arucard21.epox.webaom.JobList;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JobList_ESTest extends JobList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JobList jobList0 = new JobList();
      // Undeclared exception!
      try { 
        jobList0.updateQueues((Job) null, 19005442, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.LinkedHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.updateQueues((Job) null, (-57434055), 0);
      assertEquals(0, jobList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JobList jobList0 = new JobList();
      Job job0 = jobList0.get((-835));
      assertNull(job0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JobList jobList0 = new JobList();
      jobList0.filter((-866), 2088, true);
      assertEquals(0, jobList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.filter(9000, 972, false);
      assertEquals(0, jobList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JobList jobList0 = new JobList();
      boolean boolean0 = jobList0.addPath((File) null);
      boolean boolean1 = jobList0.has((File) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.addPath((File) null);
      boolean boolean0 = jobList0.addPath((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JobList jobList0 = new JobList();
      // Undeclared exception!
      try { 
        jobList0.rem((-433));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JobList jobList0 = new JobList();
      // Undeclared exception!
      try { 
        jobList0.add((Job) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.updateQueues((Job) null, 1, 50331649);
      assertEquals(1, JobList.DIO);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JobList jobList0 = new JobList();
      // Undeclared exception!
      try { 
        jobList0.updateQueues((Job) null, 16777224, 65536);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.util.LinkedHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JobList jobList0 = new JobList();
      boolean boolean0 = jobList0.workForNio();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.updateQueues((Job) null, 2, 4259860);
      boolean boolean0 = jobList0.workForDio();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JobList jobList0 = new JobList();
      boolean boolean0 = jobList0.workForDio();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.filter((-1991), (-1991), true);
      int int0 = jobList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JobList jobList0 = new JobList();
      int int0 = jobList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.filter((-1991), (-1991), true);
      jobList0.get(16777216);
      assertEquals(0, jobList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JobList jobList0 = new JobList();
      Job job0 = jobList0.get(0);
      assertNull(job0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JobList jobList0 = new JobList();
      MockFile mockFile0 = new MockFile(", Array: ");
      // Undeclared exception!
      try { 
        jobList0.add((File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.Job", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.filter(0, 0, true);
      assertEquals(2, JobList.NIO);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.clear();
      assertEquals(2, JobList.NIO);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JobList jobList0 = new JobList();
      String string0 = jobList0.toString();
      assertEquals("HashSet: 0, ArrayList: 0, Array: -1", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.filter((-1087), 32, true);
      String string0 = jobList0.toString();
      assertEquals("HashSet: 0, ArrayList: 0, Array: 0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JobList jobList0 = new JobList();
      // Undeclared exception!
      try { 
        jobList0.rem(1930);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1930, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.updateQueues((Job) null, (-1991), 17956866);
      boolean boolean0 = jobList0.workForNio();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JobList jobList0 = new JobList();
      Job job0 = jobList0.getJobDio();
      assertNull(job0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JobList jobList0 = new JobList();
      boolean boolean0 = jobList0.has((File) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JobList jobList0 = new JobList();
      jobList0.addPath((File) null);
      Job job0 = jobList0.add((File) null);
      assertNull(job0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JobList jobList0 = new JobList();
      Job job0 = jobList0.getJobNio();
      assertNull(job0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JobList jobList0 = new JobList();
      Job[] jobArray0 = jobList0.array();
      assertEquals(0, jobArray0.length);
  }
}
