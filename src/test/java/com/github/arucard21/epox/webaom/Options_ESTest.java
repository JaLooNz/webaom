/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:03:17 GMT 2018
 */

package com.github.arucard21.epox.webaom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.arucard21.epox.webaom.Options;
import java.awt.HeadlessException;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(13, Options.B_LEN);
      assertEquals(6, Options.I_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(18, Options.S_LEN);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      
      options0.setI(0, (-997));
      assertFalse(options0.onDisk());
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(13, Options.B_LEN);
      assertEquals(6, Options.I_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(18, Options.S_LEN);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      assertFalse(options1.onDisk());
      assertEquals(9, Options.B_STORPSW);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(13, Options.B_LEN);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(2, Options.I_STATE);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
      
      boolean boolean0 = options0.equals(options1);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options1.equals((Object)options0));
      assertNotSame(options0, options1);
      assertNotSame(options1, options0);
      assertFalse(boolean0);
      assertFalse(options0.onDisk());
      assertFalse(options1.onDisk());
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(13, Options.B_LEN);
      assertEquals(6, Options.I_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(18, Options.S_LEN);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(13, Options.B_LEN);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(2, Options.I_STATE);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(4, Options.S_BROWSER);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(13, Options.B_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(1, Options.S_HOSTURL);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      options0.mBa = booleanArray0;
      assertFalse(options0.onDisk());
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      assertFalse(options1.onDisk());
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.I_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(2, Options.I_STATE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      
      boolean boolean0 = options1.equals(options0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options1.equals((Object)options0));
      assertNotSame(options0, options1);
      assertNotSame(options1, options0);
      assertFalse(boolean0);
      assertFalse(options0.onDisk());
      assertFalse(options1.onDisk());
      assertEquals(4, Options.S_BROWSER);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(13, Options.B_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.I_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(2, Options.I_STATE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(0, Options.I_RPORT);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(13, Options.B_LEN);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.I_STATE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      
      options0.setB(0, false);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(0, Options.I_RPORT);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(13, Options.B_LEN);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.I_STATE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(18, Options.S_LEN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(6, Options.B_WATCHED);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/riaas/.webaom");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = options0.load();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(18, Options.S_LEN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(6, Options.B_WATCHED);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/riaas/.webaom");
      byte[] byteArray0 = new byte[6];
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(1, Options.I_LPORT);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(17, Options.S_JOBCOLS);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean1 = options0.onDisk();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(options0.onDisk());
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(1, Options.I_LPORT);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(17, Options.S_JOBCOLS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(6, Options.I_LEN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.I_DELAY);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(13, Options.B_LEN);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(2, Options.I_STATE);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.S_SOURCEF);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\u0001";
      options0.mSa = stringArray0;
      assertFalse(options0.onDisk());
      
      String string0 = options0.getS(0);
      assertNotNull(string0);
      assertEquals("\u0001", string0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(6, Options.I_LEN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.I_DELAY);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(13, Options.B_LEN);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(2, Options.I_STATE);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.S_SOURCEF);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(0, Options.I_RPORT);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(13, Options.B_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.I_LEN);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(5, Options.I_USMOD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.I_LPORT);
      
      options0.setS(0, "");
      assertFalse(options0.onDisk());
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(0, Options.I_RPORT);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(13, Options.B_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.I_LEN);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(5, Options.I_USMOD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.I_LPORT);
      
      String string0 = options0.getS(0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(options0.onDisk());
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(0, Options.I_RPORT);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(13, Options.B_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.I_LEN);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(5, Options.I_USMOD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.I_LPORT);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(13, Options.B_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(4, Options.I_DELAY);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(11, Options.B_AUTOLOG);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 7;
      options0.mIa = intArray0;
      assertFalse(options0.onDisk());
      
      int int0 = options0.getI(0);
      assertEquals(7, int0);
      assertFalse(options0.onDisk());
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(13, Options.B_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(4, Options.I_DELAY);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(11, Options.B_AUTOLOG);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(14, Options.S_PATHREG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(5, Options.I_USMOD);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(13, Options.B_LEN);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(8, Options.S_OTHERIN);
      
      boolean boolean0 = options0.dec("001\u00020000000000000\u00020\u00010\u00010\u00010\u00010\u00010\u0001\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002");
      assertTrue(boolean0);
      assertFalse(options0.onDisk());
      assertEquals(14, Options.S_PATHREG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(5, Options.I_USMOD);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(13, Options.B_LEN);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(8, Options.S_OTHERIN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(2, Options.I_STATE);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(18, Options.S_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      
      // Undeclared exception!
      try { 
        options0.setS((-2560), (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2560
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.I_STATE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(4, Options.I_DELAY);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(1, Options.I_LPORT);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.S_SOURCEF);
      
      options0.mIa = null;
      assertFalse(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.setI(5, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(6, Options.I_LEN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(0, Options.I_RPORT);
      assertEquals(5, Options.I_USMOD);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(4, Options.I_DELAY);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(2, Options.I_STATE);
      assertEquals(13, Options.B_LEN);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(3, Options.S_HASHDIR);
      
      options0.mBa = null;
      assertFalse(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.setB((-861), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(0, Options.I_RPORT);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(18, Options.S_LEN);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(13, Options.B_LEN);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(11, Options.S_REPLSYS);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/riaas/.webaom");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "2w");
      assertTrue(boolean0);
      
      options0.mSa = null;
      assertTrue(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.save();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.I_LEN);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(18, Options.S_LEN);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(4, Options.I_DELAY);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(11, Options.S_REPLSYS);
      
      int[] intArray0 = new int[0];
      options0.mIa = intArray0;
      assertFalse(options0.onDisk());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/riaas/.webaom");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "BI6>bp*a");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        options0.save();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(1, Options.I_LPORT);
      assertEquals(4, Options.I_DELAY);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      
      // Undeclared exception!
      try { 
        options0.getS(489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 489
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.S_STORAGE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(13, Options.B_LEN);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(6, Options.I_LEN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(2, Options.I_STATE);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(15, Options.S_FONTSTR);
      
      // Undeclared exception!
      try { 
        options0.getI((-1094730640));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1094730640
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(6, Options.I_LEN);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(13, Options.B_LEN);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(2, Options.I_STATE);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(11, Options.S_REPLSYS);
      
      options0.mBa = null;
      assertFalse(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.getB((-1393));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(13, Options.B_LEN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(5, Options.I_USMOD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(6, Options.I_LEN);
      assertEquals(12, Options.B_AUTOSAV);
      
      boolean[] booleanArray0 = new boolean[3];
      options0.mBa = booleanArray0;
      assertFalse(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.equals(options0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.I_LEN);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(2, Options.I_STATE);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(13, Options.B_LEN);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(8, Options.B_NATKEEP);
      
      options0.mIa = null;
      assertFalse(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.enc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(6, Options.I_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(2, Options.I_STATE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(1, Options.I_LPORT);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(13, Options.B_LEN);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      
      // Undeclared exception!
      try { 
        options0.dec((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(5, Options.I_USMOD);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(18, Options.S_LEN);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(4, Options.I_DELAY);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(6, Options.I_LEN);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(2, Options.I_STATE);
      assertEquals(13, Options.B_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(9, Options.S_VRLSREN);
      
      // Undeclared exception!
      try { 
        options0.dec("001");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(2, Options.I_STATE);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(1, Options.I_LPORT);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
      
      boolean boolean0 = options0.onDisk();
      assertFalse(boolean0);
      assertFalse(options0.onDisk());
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(2, Options.I_STATE);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(1, Options.I_LPORT);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(5, Options.I_USMOD);
      assertEquals(18, Options.S_LEN);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(1, Options.I_LPORT);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(2, Options.I_STATE);
      assertEquals(13, Options.B_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.I_LEN);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(4, Options.I_DELAY);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(18, Options.S_LEN);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\u0001";
      options0.mSa = stringArray0;
      assertFalse(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.enc();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(5, Options.I_USMOD);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(4, Options.I_DELAY);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(13, Options.B_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.S_SOURCEF);
      
      options0.setS(8, "");
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(5, Options.I_USMOD);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(4, Options.I_DELAY);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(13, Options.B_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.S_SOURCEF);
      
      String string0 = options0.enc();
      assertNotNull(string0);
      assertEquals("001\u00020000000000000\u00020\u00010\u00010\u00010\u00010\u00010\u0001\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002null\u0002", string0);
      assertFalse(options0.onDisk());
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(5, Options.I_USMOD);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(1, Options.I_LPORT);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(6, Options.I_LEN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(4, Options.I_DELAY);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(13, Options.B_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.S_SOURCEF);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(14, Options.S_PATHREG);
      assertEquals(0, Options.I_RPORT);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(2, Options.I_STATE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(13, Options.B_LEN);
      assertEquals(6, Options.I_LEN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(1, Options.I_LPORT);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(4, Options.I_DELAY);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(18, Options.S_LEN);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      options0.mBa = booleanArray0;
      assertFalse(options0.onDisk());
      
      // Undeclared exception!
      try { 
        options0.enc();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.I_STATE);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(18, Options.S_LEN);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(13, Options.B_LEN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      
      boolean boolean0 = options0.dec("(w9g*AIqM$");
      assertFalse(boolean0);
      assertFalse(options0.onDisk());
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.I_STATE);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(18, Options.S_LEN);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(13, Options.B_LEN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.I_STATE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(6, Options.I_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(5, Options.I_USMOD);
      assertEquals(1, Options.I_LPORT);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
      
      boolean boolean0 = options0.dec("");
      assertFalse(boolean0);
      assertFalse(options0.onDisk());
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(2, Options.I_STATE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.I_DELAY);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(6, Options.I_LEN);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(5, Options.I_USMOD);
      assertEquals(1, Options.I_LPORT);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(18, Options.S_LEN);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.S_USRNAME);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.I_LEN);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(5, Options.I_USMOD);
      assertEquals(0, Options.I_RPORT);
      assertEquals(1, Options.I_LPORT);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(18, Options.S_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(13, Options.B_LEN);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(17, Options.S_JOBCOLS);
      
      // Undeclared exception!
      try { 
        options0.save();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/riaas/.webaom");
      byte[] byteArray0 = new byte[6];
      Options options0 = new Options();
      assertNotNull(options0);
      assertFalse(options0.onDisk());
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Options options1 = new Options();
      assertFalse(options1.equals((Object)options0));
      assertNotNull(options1);
      assertTrue(options1.onDisk());
      assertEquals(6, Options.I_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(18, Options.S_LEN);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(5, Options.I_USMOD);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      
      options0.save();
      assertFalse(options0.equals((Object)options1));
      assertNotSame(options0, options1);
      assertTrue(options0.onDisk());
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      
      boolean boolean1 = options1.load();
      assertFalse(options1.equals((Object)options0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(options1, options0);
      assertTrue(boolean1);
      assertTrue(options1.onDisk());
      assertEquals(6, Options.I_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(18, Options.S_LEN);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(5, Options.I_USMOD);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      
      boolean boolean2 = options1.equals(options0);
      assertFalse(options0.equals((Object)options1));
      assertFalse(options1.equals((Object)options0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(options0, options1);
      assertNotSame(options1, options0);
      assertTrue(boolean2);
      assertTrue(options0.onDisk());
      assertTrue(options1.onDisk());
      assertEquals(6, Options.I_LEN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(4, Options.I_DELAY);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(0, Options.I_RPORT);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.I_LPORT);
      assertEquals(5, Options.I_USMOD);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(18, Options.S_LEN);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(6, Options.I_LEN);
      assertEquals(4, Options.I_DELAY);
      assertEquals(3, Options.B_HASHSHA);
      assertEquals(17, Options.S_JOBCOLS);
      assertEquals(12, Options.S_HTMLCOL);
      assertEquals(3, Options.I_TIMEO);
      assertEquals(2, Options.S_MYDBURL);
      assertEquals(9, Options.S_VRLSREN);
      assertEquals(0, Options.I_RPORT);
      assertEquals(14, Options.S_PATHREG);
      assertEquals(8, Options.S_OTHERIN);
      assertEquals(2, Options.I_STATE);
      assertEquals(5, Options.B_ADDFILE);
      assertEquals(3, Options.S_HASHDIR);
      assertEquals(6, Options.B_WATCHED);
      assertEquals(12, Options.B_AUTOSAV);
      assertEquals(6, Options.S_SOURCEF);
      assertEquals(11, Options.B_AUTOLOG);
      assertEquals(5, Options.S_EXTENSN);
      assertEquals(0, Options.B_UNUSED0);
      assertEquals(13, Options.B_LEN);
      assertEquals(13, Options.S_LOGFILE);
      assertEquals(4, Options.B_HASHTTH);
      assertEquals(18, Options.S_LEN);
      assertEquals(15, Options.S_FONTSTR);
      assertEquals(7, Options.S_STORAGE);
      assertEquals(1, Options.B_HASHCRC);
      assertEquals(4, Options.S_BROWSER);
      assertEquals(16, Options.S_LOGHEAD);
      assertEquals(0, Options.S_USRNAME);
      assertEquals(10, Options.S_VRLSMOV);
      assertEquals(1, Options.S_HOSTURL);
      assertEquals(10, Options.B_ALOADDB);
      assertEquals(2, Options.B_HASHMD5);
      assertEquals(1, Options.I_LPORT);
      assertEquals(11, Options.S_REPLSYS);
      assertEquals(5, Options.I_USMOD);
      assertEquals(7, Options.B_UNUSED1);
      assertEquals(9, Options.B_STORPSW);
      assertEquals(8, Options.B_NATKEEP);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/riaas/.webaom");
      byte[] byteArray0 = new byte[6];
      Options options0 = new Options();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Options options1 = new Options();
      options1.save();
      options1.load();
      // Undeclared exception!
      try { 
        options0.equals(options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      options0.mSa = stringArray0;
      stringArray0[0] = "\u0001";
      Options options1 = new Options();
      boolean boolean0 = options0.equals(options1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      options0.setI(0, 5);
      Options options1 = new Options();
      boolean boolean0 = options0.equals(options1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      options0.mBa = booleanArray0;
      Options options1 = new Options();
      boolean boolean0 = options0.equals(options1);
      assertFalse(options1.onDisk());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.equals(options0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      options0.getI(0);
      assertFalse(options0.onDisk());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.load();
      assertFalse(boolean0);
      assertFalse(options0.onDisk());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = new Options();
      options0.getB(options0.B_ADDFILE);
      assertFalse(options0.onDisk());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Options options0 = new Options();
      options0.setS(8, "");
      boolean boolean0 = options0.equals(options0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.setI((-1704), 1008);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1704
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.path();
      assertEquals("/home/riaas/.webaom", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Options options0 = new Options();
      options0.getS(0);
      assertFalse(options0.onDisk());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.setB(13, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.github.arucard21.epox.webaom.Options", e);
      }
  }
}
