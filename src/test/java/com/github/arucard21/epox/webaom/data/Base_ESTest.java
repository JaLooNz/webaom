/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:07:23 GMT 2018
 */

package com.github.arucard21.epox.webaom.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.arucard21.epox.webaom.data.Base;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base_ESTest extends Base_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base base0 = new Base();
      assertEquals(0L, base0.mLs);
      
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base0.mLs = (-1L);
      base1.add(base0);
      base1.mkArray();
      base0.add(base1);
      base0.toString();
      base0.remove(base1);
      base0.mkArray();
      base0.clear();
      base1.remove(base0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Press F5 to update.";
      Base.getInst(stringArray0);
      base0.get((Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      base0.mkArray();
      base0.clear();
      Object object0 = base0.getKey();
      base0.getKey();
      base0.add(base0);
      System.setCurrentTimeMillis((-5791L));
      Base base1 = base0.get(object0);
      base0.get((Object) base1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      base0.mLs = base0.mLs;
      base0.add(base0);
      base0.toString();
      base0.mkArray();
      base0.remove(base0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      base0.mkArray();
      Base base1 = new Base();
      base1.clear();
      Object object0 = base0.getKey();
      base0.remove(base1);
      base0.getKey();
      base0.add(base1);
      System.setCurrentTimeMillis((-5791L));
      Base base2 = base0.get(object0);
      base1.get((Object) base2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base0.mLs = 9L;
      base0.add(base1);
      base0.toString();
      base0.remove(base1);
      base0.mkArray();
      base0.clear();
      base1.remove(base0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base1.mkArray();
      base0.mLs = (-1L);
      base0.add(base1);
      base0.toString();
      base0.mkArray();
      base0.clear();
      base1.remove(base0);
      Base.getInst((String[]) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base0.mLs = (-1L);
      base0.add(base1);
      base0.toString();
      base0.mkArray();
      base1.remove(base0);
      Base base2 = base0.get(0);
      base0.add(base2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D/Apieo/7@fMn8b|7E";
      stringArray0[1] = "#:J 5oT32yV3|NE";
      stringArray0[2] = "#:J 5oT32yV3|NE";
      stringArray0[3] = "Press F5 to update.";
      stringArray0[4] = "Press F5 to update.";
      stringArray0[5] = "v@> jUA%J[/\"j%*BS";
      stringArray0[6] = "Press F5 to update.";
      stringArray0[7] = "#:J 5oT32yV3|NE";
      stringArray0[8] = "#:J 5oT32yV3|NE";
      Base.getInst(stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base0.add(base1);
      base0.toString();
      base1.remove(base0);
      base0.has(base1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base1.mLs = (-1L);
      base0.add(base1);
      base0.toString();
      base0.mkArray();
      base0.clear();
      base1.remove(base0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base base0 = new Base();
      Base base1 = new Base();
      base0.dump("");
      base0.has(base1);
      base0.id = 0;
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      Base.getInst(stringArray0);
      base0.dump("TSjJzu,\" V+DRHm;");
      Base.getInst(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base0.mLs = (-1L);
      base0.add(base1);
      base0.toString();
      base0.clear();
      base1.remove(base0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Base base0 = new Base();
      Base base1 = new Base();
      base1.remove(base0);
      base1.dump("^");
      base1.clear();
      base0.remove(base1);
      base0.remove(base1);
      base0.serialize();
      base1.has(base0);
      base1.getKey();
      base0.mkArray();
      base1.getKey();
      base1.clear();
      base0.mLs = (-472L);
      base1.id = 0;
      base1.dump("w<Oi@K");
      base0.clear();
      base0.mLs = (-1230L);
      base1.getKey();
      base0.serialize();
      base0.clear();
      base0.add(base1);
      base0.dump("<Yd\"mTy4dm3cL!LhZT{");
      base1.remove(base0);
      assertEquals(0, base1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base base0 = new Base();
      base0.add(base0);
      base0.mLs = base0.mLs;
      base0.size();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.github.arucard21.epox.webaom.data.Base";
      stringArray0[2] = "com.github.arucard21.epox.webaom.data.Base";
      Base base1 = Base.getInst(stringArray0);
      assertNull(base1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base base0 = new Base();
      base0.id = 124;
      base0.mLs = (long) 124;
      Base base1 = base0.get((-520));
      assertNull(base1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("^{y^fm");
      String[] stringArray0 = new String[3];
      base0.getKey();
      stringArray0[0] = "`PfJ-\"_/5K";
      String string0 = "";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "^{y^fm";
      stringArray1[1] = "`PfJ-\"_/5K";
      stringArray1[2] = "";
      stringArray1[3] = "^{y^fm";
      stringArray1[4] = "";
      Base.getInst(stringArray1);
      // Undeclared exception!
      try { 
        base0.add((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      base0.get((Object) "#:J 5oT32yV3|NE");
      base0.mLs = (-1L);
      // Undeclared exception!
      try { 
        base0.add((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      base0.serialize();
      // Undeclared exception!
      try { 
        base0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base base0 = new Base();
      base0.mLs = (-1L);
      base0.mLs = (-1L);
      base0.clear();
      Base base1 = new Base();
      base1.add(base0);
      base1.id = 0;
      base1.getKey();
      base0.mLs = (-1L);
      base0.add(base1);
      base0.getKey();
      base0.id = (-1329);
      // Undeclared exception!
      try { 
        base0.add((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base base0 = new Base();
      base0.id = 391;
      Object object0 = new Object();
      base0.get(object0);
      // Undeclared exception!
      try { 
        base0.remove((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      int int0 = 0;
      Base base1 = new Base();
      base0.remove(base1);
      base1.id = 0;
      // Undeclared exception!
      try { 
        base0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base base0 = new Base();
      base0.remove(base0);
      base0.clear();
      base0.clear();
      base0.serialize();
      Object object0 = base0.getKey();
      assertEquals(0, object0);
      
      base0.size();
      assertEquals(0L, base0.mLs);
      assertEquals("Press F5 to update.", base0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      base0.mLs = 0L;
      base0.id = (-2433);
      // Undeclared exception!
      try { 
        base0.get(1923);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1923
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      base0.toString();
      int int0 = base0.compareTo("Press F5 to update.");
      assertEquals((-26), int0);
      
      base0.dump("Press F5 to update.");
      assertEquals("Press F5 to update.", base0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base base0 = new Base();
      base0.clear();
      base0.mkArray();
      base0.dump("");
      assertEquals(0L, base0.mLs);
      assertEquals("Press F5 to update.", base0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      base0.mLs = 468L;
      base0.clear();
      base0.clear();
      Base base1 = null;
      // Undeclared exception!
      try { 
        base0.has((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      base0.clear();
      base0.mkArray();
      assertEquals(0L, base0.mLs);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base base0 = new Base();
      Base base1 = new Base();
      base1.clear();
      base0.has(base1);
      Base base2 = null;
      // Undeclared exception!
      try { 
        base0.has((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base base0 = new Base();
      base0.mLs = 0L;
      base0.size();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "ZU40ZDU2[\"IXxG";
      stringArray0[1] = "";
      stringArray0[2] = ".;`Hr&yn'$Hz\"L&";
      stringArray0[3] = "vz*%k6:bh]fRkmCG!P";
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Base base0 = Base.getInst(stringArray0);
      assertNull(base0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base base0 = new Base();
      base0.mLs = 1079L;
      base0.get((Object) "");
      // Undeclared exception!
      try { 
        base0.add((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base base0 = new Base();
      base0.toString();
      base0.get(186);
      // Undeclared exception!
      try { 
        base0.add((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base base0 = new Base();
      base0.get((Object) "Base: Negative size: ");
      base0.clear();
      String string0 = base0.toString();
      assertEquals("Press F5 to update.", string0);
      assertEquals(0L, base0.mLs);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base base0 = new Base();
      base0.get((-1542));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "GmmqV![S-_";
      stringArray0[1] = "@jJMSCC?NM-fJ";
      stringArray0[2] = " }";
      stringArray0[3] = "1ZzDL0tcPOt|5La";
      Base.getInst(stringArray0);
      // Undeclared exception!
      try { 
        base0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0gLY{Gj7.!%^";
      Base base0 = Base.getInst(stringArray0);
      assertNull(base0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base base0 = new Base();
      Object object0 = new Object();
      int int0 = base0.compareTo(object0);
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base base0 = new Base();
      base0.size();
      Object object0 = base0.getKey();
      assertEquals(0, object0);
      
      base0.clear();
      base0.get(2950);
      assertEquals(0L, base0.mLs);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Base base0 = Base.getInst(stringArray0);
      assertNull(base0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      Base base1 = new Base();
      base0.mLs = (-1L);
      base0.add(base1);
      base0.toString();
      assertEquals((-1L), base0.mLs);
      
      base0.remove(base1);
      base0.mkArray();
      base0.clear();
      base1.remove(base0);
      assertEquals(0L, base0.mLs);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base base0 = new Base();
      base0.id = 352;
      base0.dump("");
      base0.serialize();
      base0.get((-3969));
      assertEquals("Press F5 to update.", base0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base base0 = new Base();
      base0.mkArray();
      Base base1 = new Base();
      base0.remove(base1);
      base0.id = 0;
      // Undeclared exception!
      try { 
        base0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base base0 = new Base();
      base0.id = (-1205);
      base0.clear();
      base0.dump("");
      base0.dump("");
      base0.size();
      base0.get((Object) "");
      // Undeclared exception!
      try { 
        base0.has((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("^{y^fm");
      String[] stringArray0 = new String[3];
      base0.getKey();
      stringArray0[0] = "^{y^fm";
      String string0 = "";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "^{y^fm";
      stringArray1[1] = "^{y^fm";
      stringArray1[2] = "";
      stringArray1[3] = "^{y^fm";
      stringArray1[4] = "";
      base0.add(base0);
      base0.toString();
      stringArray0[1] = "";
      base0.mLs = (-1L);
      stringArray0[2] = "Z_9ZYi_";
      Base.getInst(stringArray0);
      // Undeclared exception!
      try { 
        base0.has((Base) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.data.Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base base0 = new Base();
      base0.dump("#:J 5oT32yV3|NE");
      base0.mkArray();
      base0.mLs = (-1L);
      base0.add(base0);
      base0.add(base0);
      base0.toString();
      assertEquals(1, base0.size());
      
      base0.remove(base0);
      base0.mkArray();
      base0.clear();
      base0.remove(base0);
      Object object0 = new Object();
      int int0 = base0.compareTo(object0);
      assertEquals((-26), int0);
  }
}
