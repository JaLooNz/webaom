/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:01:35 GMT 2018
 */

package com.github.arucard21.epox.webaom.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.arucard21.epox.swing.CommandModel;
import com.github.arucard21.epox.swing.JPanelCommand;
import com.github.arucard21.epox.swing.Log;
import com.github.arucard21.epox.webaom.A;
import com.github.arucard21.epox.webaom.ChiiEmu;
import com.github.arucard21.epox.webaom.net.ACon;
import com.github.arucard21.epox.webaom.net.AConS;
import com.github.arucard21.epox.webaom.ui.JPanelMain;
import java.awt.AWTEventMulticaster;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.io.IOException;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ACon_ESTest extends ACon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      AConS aConS0 = new AConS("", 0, 40, 0, 40, 40, true);
      assertNotNull(aConS0);
      assertEquals(40, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.rport);
      assertEquals(40, aConS0.delay);
      assertEquals(40, aConS0.lport);
      assertTrue(aConS0.nat);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(40, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.rport);
      assertEquals(40, aConS0.delay);
      assertEquals(40, aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      
      aConS0.rport = 645;
      aCon0.m_authed = true;
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertTrue(aCon0.isLoggedIn());
      
      aConS0.nat = true;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = aCon0.connect();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertTrue(aCon0.isLoggedIn());
      assertTrue(boolean2);
      assertEquals(645, aConS0.rport);
      assertEquals(40, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(40, aConS0.delay);
      assertEquals(40, aConS0.lport);
      assertTrue(aConS0.nat);
      assertTrue(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      try { 
        aCon0.logout();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Operation Failed: IOEXCEPT: Simulated IO exception
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Ping AniDB", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      AConS aConS0 = new AConS("Note", 0, 0, 0, 0, 0, false);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      A.component = null;
      ACon.shutdown = false;
      aCon0.actionPerformed((ActionEvent) null);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      ACon.shutdown = false;
      aCon0.error("");
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      String string0 = aCon0.getLastError();
      assertNotNull(string0);
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("", string0);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      ACon.shutdown = false;
      try { 
        aCon0.send("Note", "", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "ErrIr in s=ript @ line");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      
      AConS aConS0 = new AConS("ErrIr in s=ript @ line", 4, 180000, (-358537222), 3737, 3737, true);
      assertNotNull(aConS0);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(3737, aConS0.delay);
      
      aConS0.nat = true;
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(3737, aConS0.delay);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.disconnect();
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(3737, aConS0.delay);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.actionPerformed((ActionEvent) null);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(3737, aConS0.delay);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.actionPerformed((ActionEvent) null);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(3737, aConS0.delay);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      JPanelMain jPanelMain0 = null;
      try {
        jPanelMain0 = new JPanelMain();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.ui.JPanelMain", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AConS aConS0 = new AConS((String) null, 405, 405, 405, 0, 405, true);
      assertNotNull(aConS0);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(405000, aConS0.tout);
      assertEquals(405, aConS0.rport);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)85;
      aConS0.tout = 0;
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertEquals(0, aConS0.tout);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      aConS0.tout = (int) (byte)85;
      aConS0.delay = 0;
      aCon0.error("api.anidb.net");
      assertEquals("api.anidb.net", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(85, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      aCon0.disconnect();
      assertEquals("api.anidb.net", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(85, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      boolean boolean0 = aCon0.connect();
      assertEquals("api.anidb.net", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertTrue(boolean0);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(85, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      try { 
        aCon0.logout();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Operation Failed: IOEXCEPT: Simulated IO exception
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ACon.shutdown = true;
      AConS aConS0 = new AConS("aname=", 2286, 1699, 2286, 31, 3038, false);
      assertNotNull(aConS0);
      assertEquals(3038, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(1699, aConS0.lport);
      assertEquals(2286000, aConS0.tout);
      assertEquals(31, aConS0.delay);
      assertEquals(2286, aConS0.rport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(3038, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(1699, aConS0.lport);
      assertEquals(2286000, aConS0.tout);
      assertEquals(31, aConS0.delay);
      assertEquals(2286, aConS0.rport);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertTrue(ACon.shutdown);
      
      try { 
        aCon0.send("aname=", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not Initialized.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      int int0 = 4194304;
      boolean boolean0 = true;
      AConS aConS0 = new AConS("", 4194304, 4194304, 4194304, 2843, (-1485), true);
      assertNotNull(aConS0);
      assertEquals(4194304, aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals(2843, aConS0.delay);
      assertEquals((-100663296), aConS0.tout);
      assertTrue(aConS0.nat);
      
      aConS0.lport = (-3570);
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-1485), aConS0.max_tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals(2843, aConS0.delay);
      assertEquals((-100663296), aConS0.tout);
      assertEquals((-3570), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      
      aCon0.disconnect();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-1485), aConS0.max_tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals(2843, aConS0.delay);
      assertEquals((-100663296), aConS0.tout);
      assertEquals((-3570), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      
      aCon0.set("", "", "");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-1485), aConS0.max_tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals(2843, aConS0.delay);
      assertEquals((-100663296), aConS0.tout);
      assertEquals((-3570), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      
      try { 
        aCon0.enCrypt();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:4194304
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AConS aConS0 = new AConS("", 0, 0, 0, 0, 0, false);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aConS0.rport = 645;
      ACon.shutdown = true;
      boolean boolean0 = aCon0.isLoggedIn();
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(boolean0);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertEquals(645, aConS0.rport);
      assertTrue(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      
      boolean boolean1 = aCon0.connect();
      assertFalse(boolean1 == boolean0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertTrue(boolean1);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertEquals(645, aConS0.rport);
      assertTrue(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      
      boolean boolean2 = aCon0.logout();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertTrue(boolean2);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertEquals(645, aConS0.rport);
      assertTrue(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.debug("");
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertEquals(645, aConS0.rport);
      assertTrue(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      
      try { 
        aCon0.send("api.anidb.net", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not Initialized.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-101);
      boolean boolean0 = NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, evoSuiteRemoteAddress0, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte) (-81), (byte)118, (byte)51, (byte)6, (byte) (-126), (byte) (-101)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      
      AConS aConS0 = new AConS("user.name", 0, 0, 4096, 4096, 4096, true);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.rport);
      assertEquals(4096, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(4096, aConS0.delay);
      assertEquals(4096000, aConS0.tout);
      assertEquals(0, aConS0.lport);
      
      aConS0.rport = 0;
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.rport);
      assertEquals(4096, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(4096, aConS0.delay);
      assertEquals(4096000, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      boolean boolean1 = jPanelCommand0.getVerifyInputWhenFocusTarget();
      assertFalse(boolean1 == boolean0);
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(boolean1);
      
      ActionEvent actionEvent0 = new ActionEvent("", 45678, "AniDB is reachable. Received reply in ", 0);
      assertNotNull(actionEvent0);
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals("AniDB is reachable. Received reply in ", actionEvent0.getActionCommand());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals(45678, actionEvent0.getID());
      
      aCon0.actionPerformed(actionEvent0);
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals("AniDB is reachable. Received reply in ", actionEvent0.getActionCommand());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals(45678, actionEvent0.getID());
      assertEquals(0, aConS0.rport);
      assertEquals(4096, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(4096, aConS0.delay);
      assertEquals(4096000, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      System.setCurrentTimeMillis((-2001L));
      // Undeclared exception!
      try { 
        aCon0.send("b7q(/O", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AConS aConS0 = new AConS((String) null, 405, 405, 405, 0, 405, true);
      assertNotNull(aConS0);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405000, aConS0.tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)85;
      aConS0.tout = 0;
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aConS0.delay = 0;
      String string0 = "";
      boolean boolean0 = aCon0.connect();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertTrue(boolean0);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.error("");
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.disconnect();
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      // Undeclared exception!
      try { 
        aCon0.logout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AConS aConS0 = new AConS("", 0, 0, 0, 0, 0, false);
      assertNotNull(aConS0);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.delay);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      
      aConS0.rport = 645;
      aConS0.max_tout = 1219;
      aConS0.delay = aConS0.delay;
      boolean boolean0 = aCon0.isLoggedIn();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertFalse(boolean0);
      assertFalse(aConS0.nat);
      assertEquals(1219, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      
      boolean boolean1 = aCon0.connect();
      assertFalse(boolean1 == boolean0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertTrue(boolean1);
      assertFalse(aConS0.nat);
      assertEquals(1219, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      
      aCon0.debug("");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertFalse(aConS0.nat);
      assertEquals(1219, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      
      aCon0.error("");
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertFalse(aConS0.nat);
      assertEquals(1219, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      
      try { 
        aCon0.send("", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Operation Failed: IOEXCEPT: Simulated IO exception
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      jPanelCommand0.grabFocus();
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      ACon aCon0 = new ACon(jPanelCommand0, (AConS) null);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "");
      assertNotNull(jSpinner_NumberEditor0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      
      ActionEvent actionEvent0 = new ActionEvent(jSpinner_NumberEditor0, 4086, (String) null);
      assertNotNull(actionEvent0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertFalse(jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_NumberEditor0.isFocusCycleRoot());
      assertFalse(jSpinner_NumberEditor0.getIgnoreRepaint());
      assertTrue(jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals(4086, actionEvent0.getID());
      assertNull(actionEvent0.getActionCommand());
      assertEquals(0L, actionEvent0.getWhen());
      
      // Undeclared exception!
      try { 
        aCon0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AConS aConS0 = new AConS((String) null, 405, 405, 405, 0, 405, true);
      assertNotNull(aConS0);
      assertEquals(405000, aConS0.tout);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      
      aConS0.tout = 0;
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      String string0 = "";
      ACon.shutdown = true;
      aCon0.error("");
      assertFalse(aCon0.isLoggedIn());
      assertEquals("", aCon0.getLastError());
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertTrue(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.disconnect();
      assertFalse(aCon0.isLoggedIn());
      assertEquals("", aCon0.getLastError());
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertTrue(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      boolean boolean0 = aCon0.logout();
      assertFalse(aCon0.isLoggedIn());
      assertEquals("", aCon0.getLastError());
      assertTrue(boolean0);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertTrue(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      try { 
        aCon0.ping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "ErrIr in s=ript @ line");
      assertNotNull(jPanelCommand0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      
      AConS aConS0 = new AConS("ErrIr in s=ript @ line", 4, 180000, (-358537222), 3737, 3737, true);
      assertNotNull(aConS0);
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.delay);
      assertEquals(4, aConS0.rport);
      assertEquals(3737, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals((-2054936432), aConS0.tout);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.delay);
      assertEquals(4, aConS0.rport);
      assertEquals(3737, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("com.github.arucard21.epox.webaom.JobList", 256);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      aCon0.actionPerformed((ActionEvent) null);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(180000, aConS0.lport);
      assertEquals(3737, aConS0.delay);
      assertEquals(4, aConS0.rport);
      assertEquals(3737, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      // Undeclared exception!
      try { 
        aCon0.send("", "ErrIr in s=ript @ line", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      jPanelCommand0.grabFocus();
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      ACon aCon0 = new ACon(jPanelCommand0, (AConS) null);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      
      // Undeclared exception!
      try { 
        aCon0.connect();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "ErrIr in s=ript @ line");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      
      AConS aConS0 = new AConS("ErrIr in s=ript @ line", 4, 180000, (-358537222), 3737, 3737, true);
      assertNotNull(aConS0);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(3737, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(4, aConS0.rport);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(180000, aConS0.lport);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(3737, aConS0.max_tout);
      assertEquals(3737, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(4, aConS0.rport);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(180000, aConS0.lport);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      try { 
        aCon0.send((String) null, "ErrIr in s=ript @ line", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown Error.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 405);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)118;
      AConS aConS0 = new AConS(" ", (-1035), (-1450), 403, 680, (byte)96, false);
      assertNotNull(aConS0);
      assertEquals(403000, aConS0.tout);
      assertEquals(96, aConS0.max_tout);
      assertEquals((-1035), aConS0.rport);
      assertEquals((-1450), aConS0.lport);
      assertEquals(680, aConS0.delay);
      assertFalse(aConS0.nat);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(403000, aConS0.tout);
      assertEquals(96, aConS0.max_tout);
      assertEquals((-1035), aConS0.rport);
      assertEquals((-1450), aConS0.lport);
      assertEquals(680, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      ActionEvent actionEvent0 = new ActionEvent(aCon0, 4127, "0WRH6BL'3Xw", (-1092));
      assertNotNull(actionEvent0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(4127, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals((-1092), actionEvent0.getModifiers());
      assertEquals("0WRH6BL'3Xw", actionEvent0.getActionCommand());
      assertEquals(403000, aConS0.tout);
      assertEquals(96, aConS0.max_tout);
      assertEquals((-1035), aConS0.rport);
      assertEquals((-1450), aConS0.lport);
      assertEquals(680, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      aCon0.actionPerformed(actionEvent0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(4127, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals((-1092), actionEvent0.getModifiers());
      assertEquals("0WRH6BL'3Xw", actionEvent0.getActionCommand());
      assertEquals(403000, aConS0.tout);
      assertEquals(96, aConS0.max_tout);
      assertEquals((-1035), aConS0.rport);
      assertEquals((-1450), aConS0.lport);
      assertEquals(680, aConS0.delay);
      assertFalse(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-19);
      boolean boolean0 = NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-24), (byte)96, (byte)118, (byte) (-78), (byte) (-30), (byte)26, (byte) (-19)}, byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      
      AConS aConS1 = new AConS((String) null, 405, 405, 405, 0, 405, false);
      assertNotNull(aConS1);
      assertFalse(aConS1.equals((Object)aConS0));
      assertFalse(aConS1.nat);
      assertEquals(405, aConS1.lport);
      assertEquals(405, aConS1.max_tout);
      assertEquals(0, aConS1.delay);
      assertEquals(405000, aConS1.tout);
      assertEquals(405, aConS1.rport);
      
      aConS1.tout = 0;
      ACon aCon1 = new ACon((Log) null, aConS1);
      assertNotNull(aCon1);
      assertFalse(aCon1.equals((Object)aCon0));
      assertFalse(aConS1.equals((Object)aConS0));
      assertEquals("Not Initialized.", aCon1.getLastError());
      assertFalse(aCon1.isLoggedIn());
      assertFalse(aCon1.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aConS1.nat);
      assertEquals(405, aConS1.lport);
      assertEquals(405, aConS1.max_tout);
      assertEquals(0, aConS1.delay);
      assertEquals(0, aConS1.tout);
      assertEquals(405, aConS1.rport);
      
      String string0 = "";
      aCon1.disconnect();
      assertNotSame(aCon1, aCon0);
      assertNotSame(aConS1, aConS0);
      assertFalse(aCon1.equals((Object)aCon0));
      assertFalse(aConS1.equals((Object)aConS0));
      assertEquals("Not Initialized.", aCon1.getLastError());
      assertFalse(aCon1.isLoggedIn());
      assertFalse(aCon1.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aConS1.nat);
      assertEquals(405, aConS1.lport);
      assertEquals(405, aConS1.max_tout);
      assertEquals(0, aConS1.delay);
      assertEquals(0, aConS1.tout);
      assertEquals(405, aConS1.rport);
      
      boolean boolean1 = aCon1.connect();
      assertNotSame(aCon1, aCon0);
      assertNotSame(aConS1, aConS0);
      assertFalse(aCon1.equals((Object)aCon0));
      assertTrue(boolean1 == boolean0);
      assertFalse(aConS1.equals((Object)aConS0));
      assertEquals("Not Initialized.", aCon1.getLastError());
      assertFalse(aCon1.isLoggedIn());
      assertTrue(boolean1);
      assertFalse(aCon1.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aConS1.nat);
      assertEquals(405, aConS1.lport);
      assertEquals(405, aConS1.max_tout);
      assertEquals(0, aConS1.delay);
      assertEquals(0, aConS1.tout);
      assertEquals(405, aConS1.rport);
      
      try { 
        aCon1.ping();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected response
         //
         verifyException("com.github.arucard21.epox.webaom.net.AConR", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AConS aConS0 = new AConS("&pass=", (-1088), (-1088), (-293), 1839030562, (-293), true);
      assertNotNull(aConS0);
      assertEquals(1839030562, aConS0.delay);
      assertEquals((-1088), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals((-293), aConS0.max_tout);
      assertEquals((-293000), aConS0.tout);
      assertEquals((-1088), aConS0.rport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(1839030562, aConS0.delay);
      assertEquals((-1088), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals((-293), aConS0.max_tout);
      assertEquals((-293000), aConS0.tout);
      assertEquals((-1088), aConS0.rport);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      ACon.shutdown = false;
      try { 
        aCon0.send((String) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown Error.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AConS aConS0 = new AConS((String) null, 405, 405, 405, 0, 405, true);
      assertNotNull(aConS0);
      assertEquals(405, aConS0.lport);
      assertEquals(405, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertEquals(405000, aConS0.tout);
      
      aConS0.tout = 0;
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      String string0 = "";
      aCon0.error("");
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      aCon0.disconnect();
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      boolean boolean0 = aCon0.connect();
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertTrue(boolean0);
      assertEquals(405, aConS0.lport);
      assertEquals(0, aConS0.tout);
      assertEquals(405, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(405, aConS0.rport);
      assertEquals(0, aConS0.delay);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      try { 
        aCon0.ping();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IO exception
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoDatagramSocketImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommandModel commandModel0 = null;
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      String string0 = "user.name";
      int int0 = 0;
      AConS aConS0 = new AConS("user.name", 0, 0, 4096, 4096, 4096, true);
      assertNotNull(aConS0);
      assertEquals(4096, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertEquals(4096000, aConS0.tout);
      assertEquals(4096, aConS0.max_tout);
      assertEquals(0, aConS0.rport);
      assertTrue(aConS0.nat);
      
      aConS0.rport = 0;
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(4096, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertEquals(4096000, aConS0.tout);
      assertEquals(4096, aConS0.max_tout);
      assertEquals(0, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      
      ActionEvent actionEvent0 = new ActionEvent("", 45678, "AniDB is reachable. Received reply in ", 0);
      assertNotNull(actionEvent0);
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals(45678, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals("AniDB is reachable. Received reply in ", actionEvent0.getActionCommand());
      
      aCon0.actionPerformed(actionEvent0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals(45678, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals("AniDB is reachable. Received reply in ", actionEvent0.getActionCommand());
      assertEquals(4096, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertEquals(4096000, aConS0.tout);
      assertEquals(4096, aConS0.max_tout);
      assertEquals(0, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      
      // Undeclared exception!
      try { 
        aCon0.send("b7q(/O", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AConS aConS0 = new AConS("", 4194304, 600, 600, 2843, (-1485), true);
      assertNotNull(aConS0);
      assertEquals(2843, aConS0.delay);
      assertEquals(600, aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-1485), aConS0.max_tout);
      
      aConS0.lport = (-3570);
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.disconnect();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.set("", "", "-!:");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aConS0.tout = 4194304;
      aCon0.debug("");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(4194304, aConS0.rport);
      assertEquals(4194304, aConS0.tout);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      String string0 = ACon.DEF_HOST;
      assertNotNull(string0);
      assertEquals("api.anidb.net", string0);
      
      aCon0.debug("");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(4194304, aConS0.rport);
      assertEquals(4194304, aConS0.tout);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.debug("uT9^25vUfc'j_");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(4194304, aConS0.rport);
      assertEquals(4194304, aConS0.tout);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.disconnect();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(4194304, aConS0.rport);
      assertEquals(4194304, aConS0.tout);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      try { 
        aCon0.ping();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:4194304
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      AConS aConS0 = new AConS("", 4194304, 600, 600, (-941), (-1485), true);
      assertNotNull(aConS0);
      assertEquals(600, aConS0.lport);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-1485), aConS0.max_tout);
      assertEquals((-941), aConS0.delay);
      assertTrue(aConS0.nat);
      
      aConS0.lport = (-3570);
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertEquals((-941), aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      aCon0.disconnect();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertEquals((-941), aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      aCon0.set("", "", "-!:");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-1485), aConS0.max_tout);
      assertEquals((-941), aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      aConS0.tout = 4194304;
      aConS0.max_tout = 680;
      aCon0.debug("");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(4194304, aConS0.rport);
      assertEquals((-3570), aConS0.lport);
      assertEquals((-941), aConS0.delay);
      assertEquals(4194304, aConS0.tout);
      assertEquals(680, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      // Undeclared exception!
      try { 
        aCon0.send("", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:4194304
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AConS aConS0 = new AConS("xxxxx", (-11), 9728000, (-11), (-11), 457, true);
      assertNotNull(aConS0);
      assertEquals(457, aConS0.max_tout);
      assertEquals((-11), aConS0.delay);
      assertEquals((-11000), aConS0.tout);
      assertEquals((-11), aConS0.rport);
      assertEquals(9728000, aConS0.lport);
      assertTrue(aConS0.nat);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(457, aConS0.max_tout);
      assertEquals((-11), aConS0.delay);
      assertEquals((-11000), aConS0.tout);
      assertEquals((-11), aConS0.rport);
      assertEquals(9728000, aConS0.lport);
      assertTrue(aConS0.nat);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      
      // Undeclared exception!
      try { 
        aCon0.logout();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-11
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "ErrIr in s=ript @ line");
      assertNotNull(jPanelCommand0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      
      AConS aConS0 = new AConS("PLvfcIyceL%o}0Cka\"T", 4, 180000, (-358537222), 3737, 3737, true);
      assertNotNull(aConS0);
      assertEquals(180000, aConS0.lport);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(3737, aConS0.delay);
      assertEquals(3737, aConS0.max_tout);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(180000, aConS0.lport);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(3737, aConS0.delay);
      assertEquals(3737, aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.actionPerformed((ActionEvent) null);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(180000, aConS0.lport);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(3737, aConS0.delay);
      assertEquals(3737, aConS0.max_tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      JPanelMain jPanelMain0 = null;
      try {
        jPanelMain0 = new JPanelMain();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.ui.JPanelMain", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AConS aConS0 = new AConS("", 0, 0, 0, 0, 0, false);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.rport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.rport);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aConS0.rport = 645;
      aConS0.delay = aConS0.delay;
      boolean boolean0 = aCon0.isLoggedIn();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertFalse(boolean0);
      assertEquals(645, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      boolean boolean1 = aCon0.connect();
      assertFalse(boolean1 == boolean0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertTrue(boolean1);
      assertEquals(645, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.debug("");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(645, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.error("");
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(645, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      try { 
        aCon0.send("", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "i2cSgmWN\rd'^D\r");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      AConS aConS0 = new AConS("qwZ~4xsk", (-701558691), (-701558691), (-701558691), 0, 0, true);
      assertNotNull(aConS0);
      assertEquals((-701558691), aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals((-701558691), aConS0.rport);
      assertEquals((-1479021752), aConS0.tout);
      assertTrue(aConS0.nat);
      
      aConS0.rport = 8;
      aConS0.rport = 0;
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-701558691), aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.rport);
      assertEquals((-1479021752), aConS0.tout);
      assertTrue(aConS0.nat);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      
      aCon0.m_session = null;
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      
      aCon0.error("");
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertEquals("", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-701558691), aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.rport);
      assertEquals((-1479021752), aConS0.tout);
      assertTrue(aConS0.nat);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      
      // Undeclared exception!
      try { 
        aCon0.connect();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-701558691
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AConS aConS0 = new AConS("Note", 0, 0, 0, 0, 0, false);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      A.component = null;
      ACon.shutdown = false;
      aCon0.actionPerformed((ActionEvent) null);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      ACon.shutdown = false;
      aConS0.lport = 0;
      aCon0.error("^5");
      assertFalse(aCon0.isLoggedIn());
      assertEquals("^5", aCon0.getLastError());
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      String string0 = aCon0.getLastError();
      assertNotNull(string0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("^5", aCon0.getLastError());
      assertEquals("^5", string0);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      ACon.shutdown = false;
      try { 
        aCon0.send("Note", "", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ^5
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      AConS aConS0 = new AConS("", 4194304, 600, 600, 2843, (-1485), true);
      assertNotNull(aConS0);
      assertEquals(2843, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-1485), aConS0.max_tout);
      assertEquals(600, aConS0.lport);
      
      aConS0.lport = (-3570);
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(2843, aConS0.delay);
      assertEquals((-3570), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      aCon0.disconnect();
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(2843, aConS0.delay);
      assertEquals((-3570), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      aCon0.set("", "", "-!:");
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(2843, aConS0.delay);
      assertEquals((-3570), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(600000, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      aConS0.tout = 4194304;
      aCon0.debug("");
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(2843, aConS0.delay);
      assertEquals((-3570), aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(4194304, aConS0.tout);
      assertEquals(4194304, aConS0.rport);
      assertEquals((-1485), aConS0.max_tout);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      
      try { 
        aCon0.send("", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not Initialized.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "I)s4";
      AConS aConS0 = new AConS("I)s4", 500, 500, 500, 500, 500, true);
      assertNotNull(aConS0);
      assertEquals(500, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(500, aConS0.rport);
      assertEquals(500, aConS0.delay);
      assertEquals(500, aConS0.lport);
      assertEquals(500000, aConS0.tout);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(500, aConS0.max_tout);
      assertTrue(aConS0.nat);
      assertEquals(500, aConS0.rport);
      assertEquals(500, aConS0.delay);
      assertEquals(500, aConS0.lport);
      assertEquals(500000, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      String string1 = "Hashed ";
      aConS0.tout = 500;
      aConS0.max_tout = 9000;
      // Undeclared exception!
      try { 
        aCon0.send("Hashed ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ChiiEmu chiiEmu0 = new ChiiEmu((ACon) null);
      assertNotNull(chiiEmu0);
      
      JPanelCommand jPanelCommand0 = new JPanelCommand(chiiEmu0, "ags/Z?aK5Irg6NU/_Z*");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      AConS aConS0 = new AConS("ags/Z?aK5Irg6NU/_Z*", 3079, (-2397), 3079, (-2397), 747, false);
      assertNotNull(aConS0);
      assertEquals((-2397), aConS0.lport);
      assertEquals(747, aConS0.max_tout);
      assertEquals(3079, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(3079000, aConS0.tout);
      assertEquals((-2397), aConS0.delay);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2397), aConS0.lport);
      assertEquals(747, aConS0.max_tout);
      assertEquals(3079, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(3079000, aConS0.tout);
      assertEquals((-2397), aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.disconnect();
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2397), aConS0.lport);
      assertEquals(747, aConS0.max_tout);
      assertEquals(3079, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(3079000, aConS0.tout);
      assertEquals((-2397), aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      boolean boolean0 = aCon0.isLoggedIn();
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(boolean0);
      assertEquals((-2397), aConS0.lport);
      assertEquals(747, aConS0.max_tout);
      assertEquals(3079, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(3079000, aConS0.tout);
      assertEquals((-2397), aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ActionEvent actionEvent0 = new ActionEvent(object0, 0, "ags/Z?aK5Irg6NU/_Z*");
      assertNotNull(actionEvent0);
      assertEquals(0, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals("ags/Z?aK5Irg6NU/_Z*", actionEvent0.getActionCommand());
      assertEquals(0, actionEvent0.getModifiers());
      
      aCon0.actionPerformed(actionEvent0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, actionEvent0.getID());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals("ags/Z?aK5Irg6NU/_Z*", actionEvent0.getActionCommand());
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals((-2397), aConS0.lport);
      assertEquals(747, aConS0.max_tout);
      assertEquals(3079, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(3079000, aConS0.tout);
      assertEquals((-2397), aConS0.delay);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      // Undeclared exception!
      try { 
        aCon0.login();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AConS aConS0 = new AConS("", 1839030562, (-1164), 1839030562, 1839030562, 1, true);
      assertNotNull(aConS0);
      assertEquals(1, aConS0.max_tout);
      assertEquals(1839030562, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals((-1164), aConS0.lport);
      assertEquals(1839030562, aConS0.rport);
      assertEquals(784559312, aConS0.tout);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(1, aConS0.max_tout);
      assertEquals(1839030562, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals((-1164), aConS0.lport);
      assertEquals(1839030562, aConS0.rport);
      assertEquals(784559312, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      // Undeclared exception!
      try { 
        aCon0.send("", "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:1839030562
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AConS aConS0 = new AConS("xxxxx", 0, 9728000, 0, 0, 0, true);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertTrue(aConS0.nat);
      assertEquals(9728000, aConS0.lport);
      assertEquals(0, aConS0.rport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertTrue(aConS0.nat);
      assertEquals(9728000, aConS0.lport);
      assertEquals(0, aConS0.rport);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      
      try { 
        aCon0.logout();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not Initialized.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "_[s}nzOH~V6";
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "_[s}nzOH~V6");
      assertNotNull(jPanelCommand0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.remove(componentListener0, componentListener0);
      assertNull(componentListener1);
      
      ComponentListener componentListener2 = AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      assertNull(componentListener2);
      
      jPanelCommand0.removeComponentListener((ComponentListener) null);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      
      Dimension dimension0 = jPanelCommand0.getPreferredSize();
      assertNotNull(dimension0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertEquals(46.0, dimension0.getHeight(), 0.01);
      assertEquals(146.0, dimension0.getWidth(), 0.01);
      assertEquals(146, dimension0.width);
      assertEquals(46, dimension0.height);
      
      AConS aConS0 = new AConS((String) null, 0, 394, 0, 0, (-1592), true);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.tout);
      assertEquals((-1592), aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(394, aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.rport);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.tout);
      assertEquals((-1592), aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(394, aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.rport);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      try { 
        aCon0.ping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Log log0 = null;
      String string0 = "";
      AConS aConS0 = new AConS("", 0, 0, 0, 0, 0, true);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.disconnect();
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertTrue(aConS0.nat);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      ACon.shutdown = false;
      try { 
        aCon0.ping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AConS aConS0 = new AConS("", 0, 0, 0, 69, 69, false);
      assertNotNull(aConS0);
      assertEquals(69, aConS0.max_tout);
      assertEquals(69, aConS0.delay);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(69, aConS0.max_tout);
      assertEquals(69, aConS0.delay);
      assertEquals(0, aConS0.rport);
      assertEquals(0, aConS0.lport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      
      aConS0.rport = 69;
      aConS0.tout = 0;
      try { 
        aCon0.enCrypt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "{\\B1`/";
      AConS aConS0 = new AConS("{B1`/", (-2895), (-2895), (-2895), (-2895), (-2895), false);
      assertNotNull(aConS0);
      assertEquals((-2895000), aConS0.tout);
      assertEquals((-2895), aConS0.rport);
      assertEquals((-2895), aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals((-2895), aConS0.delay);
      assertEquals((-2895), aConS0.lport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-2895000), aConS0.tout);
      assertEquals((-2895), aConS0.rport);
      assertEquals((-2895), aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals((-2895), aConS0.delay);
      assertEquals((-2895), aConS0.lport);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.disconnect();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-2895000), aConS0.tout);
      assertEquals((-2895), aConS0.rport);
      assertEquals((-2895), aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals((-2895), aConS0.delay);
      assertEquals((-2895), aConS0.lport);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aConS0.tout = 45678;
      aCon0.set("$", "{B1`/", "{B1`/");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals((-2895), aConS0.rport);
      assertEquals(45678, aConS0.tout);
      assertEquals((-2895), aConS0.max_tout);
      assertFalse(aConS0.nat);
      assertEquals((-2895), aConS0.delay);
      assertEquals((-2895), aConS0.lport);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      
      try { 
        aCon0.enCrypt();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:-2895
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      
      AConS aConS0 = new AConS("", 66, 66, 66, 66, 3057, true);
      assertNotNull(aConS0);
      assertEquals(66, aConS0.delay);
      assertEquals(66, aConS0.lport);
      assertEquals(66000, aConS0.tout);
      assertEquals(3057, aConS0.max_tout);
      assertEquals(66, aConS0.rport);
      assertTrue(aConS0.nat);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(66, aConS0.delay);
      assertEquals(66, aConS0.lport);
      assertEquals(66000, aConS0.tout);
      assertEquals(3057, aConS0.max_tout);
      assertEquals(66, aConS0.rport);
      assertTrue(aConS0.nat);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      
      aCon0.set((String) null, "", "Select File(s)");
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(66, aConS0.delay);
      assertEquals(66, aConS0.lport);
      assertEquals(66000, aConS0.tout);
      assertEquals(3057, aConS0.max_tout);
      assertEquals(66, aConS0.rport);
      assertTrue(aConS0.nat);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AConS aConS0 = new AConS((String) null, 405, 405, 405, 0, 405, true);
      assertNotNull(aConS0);
      assertEquals(405, aConS0.lport);
      assertEquals(405000, aConS0.tout);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      
      aConS0.tout = 0;
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(405, aConS0.lport);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      String string0 = "";
      aCon0.error("");
      assertFalse(aCon0.isLoggedIn());
      assertEquals("", aCon0.getLastError());
      assertEquals(405, aConS0.lport);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      aCon0.disconnect();
      assertFalse(aCon0.isLoggedIn());
      assertEquals("", aCon0.getLastError());
      assertEquals(405, aConS0.lport);
      assertEquals(405, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.delay);
      assertEquals(405, aConS0.max_tout);
      assertEquals(0, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      
      // Undeclared exception!
      try { 
        aCon0.logout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AConS aConS0 = new AConS("Operation Failed: TIMEOUT or SERVER BUSY. Try #", 0, 0, 2162708, 0, 0, true);
      assertNotNull(aConS0);
      assertEquals((-2132259296), aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.rport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2132259296), aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.rport);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      
      aCon0.disconnect();
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals((-2132259296), aConS0.tout);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.lport);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.rport);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AConS aConS0 = new AConS("", 0, 0, 0, 0, 0, false);
      assertNotNull(aConS0);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(0, aConS0.rport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals(0, aConS0.lport);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aConS0.rport = 645;
      aConS0.lport = 9000;
      aConS0.delay = 0;
      boolean boolean0 = aCon0.isLoggedIn();
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertFalse(boolean0);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertEquals(9000, aConS0.lport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      boolean boolean1 = aCon0.isLoggedIn();
      assertTrue(boolean1 == boolean0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertFalse(boolean1);
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertEquals(9000, aConS0.lport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.debug("");
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertEquals(9000, aConS0.lport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      aCon0.error("");
      assertFalse(aCon0.isLoggedIn());
      assertEquals("", aCon0.getLastError());
      assertEquals(0, aConS0.max_tout);
      assertEquals(0, aConS0.delay);
      assertEquals(645, aConS0.rport);
      assertEquals(9000, aConS0.lport);
      assertFalse(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      
      try { 
        aCon0.send("", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AConS aConS0 = new AConS("", (-888), (-67), 0, (-255), 0, true);
      assertNotNull(aConS0);
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals((-67), aConS0.lport);
      assertEquals((-255), aConS0.delay);
      assertEquals(0, aConS0.max_tout);
      assertEquals((-888), aConS0.rport);
      
      ACon aCon0 = new ACon((Log) null, aConS0);
      assertNotNull(aCon0);
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aCon0.isLoggedIn());
      assertTrue(aConS0.nat);
      assertEquals(0, aConS0.tout);
      assertEquals((-67), aConS0.lport);
      assertEquals((-255), aConS0.delay);
      assertEquals(0, aConS0.max_tout);
      assertEquals((-888), aConS0.rport);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(45678, ACon.DEF_LPORT);
      
      try { 
        aCon0.logout();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not Initialized.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      
      AConS aConS0 = new AConS("", 1, 1, (-1744), 0, 8, false);
      assertNotNull(aConS0);
      assertFalse(aConS0.nat);
      assertEquals(1, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals((-1744000), aConS0.tout);
      assertEquals(8, aConS0.max_tout);
      assertEquals(1, aConS0.rport);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertFalse(aConS0.nat);
      assertEquals(1, aConS0.lport);
      assertEquals(0, aConS0.delay);
      assertEquals((-1744000), aConS0.tout);
      assertEquals(8, aConS0.max_tout);
      assertEquals(1, aConS0.rport);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      assertEquals(9000, ACon.DEF_RPORT);
      
      // Undeclared exception!
      try { 
        aCon0.login();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "ErrIr in s=ript @ line");
      assertNotNull(jPanelCommand0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      
      AConS aConS0 = new AConS("ErrIr in s=ript @ line", 4, 180000, 4, 3737, 3737, true);
      assertNotNull(aConS0);
      assertEquals(3737, aConS0.delay);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(4000, aConS0.tout);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(3737, aConS0.delay);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(4000, aConS0.tout);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      jPanelCommand0.setVisible(true);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      
      aCon0.m_session = "GW9yb`PqV-{)lH*pR`Q";
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      
      aCon0.actionPerformed((ActionEvent) null);
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertEquals(3737, aConS0.delay);
      assertEquals(3737, aConS0.max_tout);
      assertEquals(4, aConS0.rport);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.lport);
      assertEquals(4000, aConS0.tout);
      assertEquals(45678, ACon.DEF_LPORT);
      assertEquals(9000, ACon.DEF_RPORT);
      assertFalse(aCon0.m_authed);
      assertFalse(ACon.shutdown);
      
      // Undeclared exception!
      try { 
        aCon0.send("ErrIr in s=ript @ line", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "ErrIr in s=ript @ line");
      assertNotNull(jPanelCommand0);
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      
      AConS aConS0 = new AConS("ErrIr in s=ript @ line", 4, 180000, (-358537222), 180000, 180000, true);
      assertNotNull(aConS0);
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.max_tout);
      assertEquals(4, aConS0.rport);
      assertEquals(180000, aConS0.delay);
      assertEquals(180000, aConS0.lport);
      assertEquals((-2054936432), aConS0.tout);
      
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      assertNotNull(aCon0);
      assertFalse(jPanelCommand0.getIgnoreRepaint());
      assertFalse(jPanelCommand0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelCommand0.isFocusCycleRoot());
      assertFalse(jPanelCommand0.isFocusTraversalPolicySet());
      assertTrue(jPanelCommand0.getFocusTraversalKeysEnabled());
      assertFalse(aCon0.isLoggedIn());
      assertEquals("Not Initialized.", aCon0.getLastError());
      assertTrue(aConS0.nat);
      assertEquals(180000, aConS0.max_tout);
      assertEquals(4, aConS0.rport);
      assertEquals(180000, aConS0.delay);
      assertEquals(180000, aConS0.lport);
      assertEquals((-2054936432), aConS0.tout);
      assertEquals(45678, ACon.DEF_LPORT);
      assertFalse(ACon.shutdown);
      assertFalse(aCon0.m_authed);
      assertEquals(9000, ACon.DEF_RPORT);
      
      try { 
        aCon0.send((String) null, "ErrIr in s=ript @ line", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown Error.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "ErrIr in s=ript @ line");
      AConS aConS0 = new AConS("ErrIr in s=ript @ line", 4, 180000, 4, 3737, 3737, true);
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      jPanelCommand0.setVisible(true);
      aCon0.actionPerformed((ActionEvent) null);
      // Undeclared exception!
      try { 
        aCon0.send("ErrIr in s=ript @ line", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 405);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-24);
      AConS aConS0 = new AConS(" ", (-1035), (-1450), 403, 680, (byte)96, false);
      ACon aCon0 = new ACon((Log) null, aConS0);
      ActionEvent actionEvent0 = new ActionEvent(aCon0, 4127, "0WRH6BL'3Xw", (-1092));
      aCon0.actionPerformed(actionEvent0);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-19);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, byteArray0);
      AConS aConS1 = new AConS((String) null, 405, 405, 405, 0, 405, false);
      aConS1.tout = 0;
      ACon aCon1 = new ACon((Log) null, aConS1);
      aCon1.disconnect();
      aCon1.connect();
      try { 
        aCon1.ping();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected response
         //
         verifyException("com.github.arucard21.epox.webaom.net.AConR", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 405);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)118;
      AConS aConS0 = new AConS(" ", (-1035), (-1450), 403, 680, (byte)96, false);
      ACon aCon0 = new ACon((Log) null, aConS0);
      ActionEvent actionEvent0 = new ActionEvent(aCon0, 4127, "0WRH6BL'3Xw", (-1092));
      aCon0.actionPerformed(actionEvent0);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-19);
      NetworkHandling.sendUdpPacket(evoSuiteLocalAddress0, byteArray0);
      AConS aConS1 = new AConS((String) null, 405, 405, 405, 0, 405, false);
      aConS1.tout = 0;
      ACon aCon1 = new ACon((Log) null, aConS1);
      aCon1.disconnect();
      aCon1.connect();
      try { 
        aCon1.ping();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unexpected response
         //
         verifyException("com.github.arucard21.epox.webaom.net.AConR", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-101);
      NetworkHandling.sendUdpPacket((EvoSuiteLocalAddress) null, evoSuiteRemoteAddress0, byteArray0);
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      AConS aConS0 = new AConS("user.name", 0, 0, 4096, 4096, 4096, true);
      aConS0.rport = 0;
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      aCon0.m_session = "";
      ActionEvent actionEvent0 = new ActionEvent("", 45678, "AniDB is reachable. Received reply in ", 0);
      aCon0.actionPerformed(actionEvent0);
      // Undeclared exception!
      try { 
        aCon0.send("b7q(/O", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      int int0 = 4194304;
      boolean boolean0 = true;
      AConS aConS0 = new AConS("", 4194304, 600, 600, 2843, (-1485), true);
      aConS0.lport = (-3570);
      ACon aCon0 = new ACon((Log) null, aConS0);
      aCon0.disconnect();
      aCon0.set("", "", "-!:");
      try { 
        aCon0.enCrypt();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port out of range:4194304
         //
         verifyException("java.net.DatagramPacket", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      jPanelCommand0.grabFocus();
      ACon aCon0 = new ACon(jPanelCommand0, (AConS) null);
      // Undeclared exception!
      try { 
        aCon0.login();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AConS aConS0 = new AConS("v~rSlc);c8DAhcOcUb", 0, 0, 0, 0, 0, false);
      ACon aCon0 = new ACon((Log) null, aConS0);
      aConS0.rport = 645;
      ACon.shutdown = true;
      aCon0.isLoggedIn();
      aCon0.connect();
      aCon0.logout();
      aCon0.ping();
      aCon0.debug("v~rSlc);c8DAhcOcUb");
      try { 
        aCon0.send("api.anidb.net", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not Initialized.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AConS aConS0 = new AConS("", 0, 40, 0, 40, 40, true);
      ACon aCon0 = new ACon((Log) null, aConS0);
      aConS0.rport = 645;
      ACon.shutdown = true;
      aCon0.isLoggedIn();
      aCon0.connect();
      aCon0.logout();
      aCon0.debug("");
      try { 
        aCon0.send("api.anidb.net", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Not Initialized.
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AConS aConS0 = new AConS((String) null, 405, 405, 405, 0, 405, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)85;
      aConS0.tout = 0;
      ACon aCon0 = new ACon((Log) null, aConS0);
      aConS0.delay = 0;
      String string0 = "";
      aConS0.max_tout = (-1380);
      aCon0.error("");
      aCon0.connect();
      aCon0.disconnect();
      try { 
        aCon0.logout();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("com.github.arucard21.epox.webaom.net.ACon", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CommandModel commandModel0 = null;
      String string0 = "";
      JPanelCommand jPanelCommand0 = new JPanelCommand((CommandModel) null, "");
      int int0 = 0;
      AConS aConS0 = new AConS("", 0, 0, 4096, 4096, 4096, true);
      aConS0.host = "";
      aConS0.rport = 0;
      ACon aCon0 = new ACon(jPanelCommand0, aConS0);
      // Undeclared exception!
      try { 
        aCon0.send("b7q(/O", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
