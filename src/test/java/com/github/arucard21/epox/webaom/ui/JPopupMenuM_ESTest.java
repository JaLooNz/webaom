/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 19:59:45 GMT 2018
 */

package com.github.arucard21.epox.webaom.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.arucard21.epox.swing.JTableSortable;
import com.github.arucard21.epox.webaom.Job;
import com.github.arucard21.epox.webaom.JobList;
import com.github.arucard21.epox.webaom.Rules;
import com.github.arucard21.epox.webaom.ui.JPanelOptRls;
import com.github.arucard21.epox.webaom.ui.JPopupMenuM;
import com.github.arucard21.epox.webaom.ui.JTableJobs;
import com.github.arucard21.epox.webaom.ui.RowModel;
import com.github.arucard21.epox.webaom.ui.TableModelDS;
import com.github.arucard21.epox.webaom.ui.TableModelJobs;
import java.awt.AWTKeyStroke;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.util.Stack;
import java.util.Vector;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JPopupMenuM_ESTest extends JPopupMenuM_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 0);
      assertNotNull(defaultTableModel0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      JTable jTable0 = new JTable(defaultTableModel0);
      assertNotNull(jTable0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      
      JobList jobList0 = new JobList();
      assertEquals(2, JobList.NIO);
      assertEquals(0, JobList.I_ERR);
      assertEquals(1, JobList.DIO);
      assertNotNull(jobList0);
      assertEquals(0, jobList0.size());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, jobList0.jlm);
      assertEquals(2, JobList.NIO);
      assertEquals(0, JobList.I_ERR);
      assertEquals(1, JobList.DIO);
      assertNotNull(jPopupMenuM0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(0, jobList0.size());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      
      Job[] jobArray0 = new Job[8];
      jPopupMenuM0.command(18, jobArray0, "9:C");
      assertFalse(vector0.contains("9:C"));
      assertEquals(2, JobList.NIO);
      assertEquals(0, JobList.I_ERR);
      assertEquals(1, JobList.DIO);
      assertEquals(8, jobArray0.length);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(0, jobList0.size());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rules rules0 = new Rules();
      assertEquals(3, Rules.M_FALLB);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(1, Rules.M_RULES);
      assertEquals(0, Rules.M_NOREN);
      assertNotNull(rules0);
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertEquals("#MOVE", rules0.getMov());
      
      JPanelOptRls jPanelOptRls0 = new JPanelOptRls(rules0);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(1, Rules.M_RULES);
      assertEquals(0, Rules.M_NOREN);
      assertNotNull(jPanelOptRls0);
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertEquals("#MOVE", rules0.getMov());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicySet());
      assertTrue(jPanelOptRls0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelOptRls0.getIgnoreRepaint());
      assertFalse(jPanelOptRls0.isFocusCycleRoot());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicyProvider());
      
      JTableSortable jTableSortable0 = (JTableSortable)jPanelOptRls0.jtDef;
      assertNotNull(jTableSortable0);
      assertFalse(jTableSortable0.isFocusCycleRoot());
      assertFalse(jTableSortable0.isFocusTraversalPolicySet());
      assertTrue(jTableSortable0.getFocusTraversalKeysEnabled());
      assertFalse(jTableSortable0.getIgnoreRepaint());
      assertFalse(jTableSortable0.isFocusTraversalPolicyProvider());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTableSortable0, (RowModel) null);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(1, Rules.M_RULES);
      assertEquals(0, Rules.M_NOREN);
      assertNotNull(jPopupMenuM0);
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertEquals("#MOVE", rules0.getMov());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicySet());
      assertTrue(jPanelOptRls0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelOptRls0.getIgnoreRepaint());
      assertFalse(jPanelOptRls0.isFocusCycleRoot());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicyProvider());
      assertFalse(jTableSortable0.isFocusCycleRoot());
      assertFalse(jTableSortable0.isFocusTraversalPolicySet());
      assertTrue(jTableSortable0.getFocusTraversalKeysEnabled());
      assertFalse(jTableSortable0.getIgnoreRepaint());
      assertFalse(jTableSortable0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.command((-2202), (Job[]) null, "k;0KUSZ ,$^rS'%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.ui.JPopupMenuM", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TableModelJobs tableModelJobs0 = new TableModelJobs((JobList) null);
      assertEquals(13, TableModelJobs.NAME);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(16, TableModelJobs.AKAN);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(7, TableModelJobs.AEPS);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(0, TableModelJobs.NUMB);
      assertNotNull(tableModelJobs0);
      assertEquals(35, tableModelJobs0.getColumnCount());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, tableModelJobs0);
      assertEquals(13, TableModelJobs.NAME);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(16, TableModelJobs.AKAN);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(7, TableModelJobs.AEPS);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(0, TableModelJobs.NUMB);
      assertNotNull(jPopupMenuM0);
      assertEquals(35, tableModelJobs0.getColumnCount());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(34, 29);
      assertNotNull(aWTKeyStroke0);
      assertEquals(34, aWTKeyStroke0.getKeyCode());
      assertEquals(401, aWTKeyStroke0.getKeyEventType());
      assertEquals(845, aWTKeyStroke0.getModifiers());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      assertEquals('\uFFFF', aWTKeyStroke0.getKeyChar());
      
      ActionEvent actionEvent0 = new ActionEvent(aWTKeyStroke0, (-1329), "~}=Y1=c");
      assertNotNull(actionEvent0);
      assertEquals(34, aWTKeyStroke0.getKeyCode());
      assertEquals(401, aWTKeyStroke0.getKeyEventType());
      assertEquals(845, aWTKeyStroke0.getModifiers());
      assertFalse(aWTKeyStroke0.isOnKeyRelease());
      assertEquals('\uFFFF', aWTKeyStroke0.getKeyChar());
      assertEquals(0L, actionEvent0.getWhen());
      assertEquals(0, actionEvent0.getModifiers());
      assertEquals("~}=Y1=c", actionEvent0.getActionCommand());
      assertEquals((-1329), actionEvent0.getID());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.ui.JPopupMenuM", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = JPopupMenuM.separator((-4212));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = JPopupMenuM.separator(11);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(9);
      assertEquals("Remove from mylist", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(12);
      assertEquals("Set Finished", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(6);
      assertEquals("Rehash", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(0);
      assertEquals("Pause", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(13);
      assertEquals("Restore Name", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(17);
      assertEquals("Edit File Name", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(2);
      assertEquals("Show Info", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(8);
      assertEquals("Add to mylist", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(7);
      assertEquals("Identify", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = JPopupMenuM.single(20);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = JPopupMenuM.single(3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = JPopupMenuM.single(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = JPopupMenuM.single(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JPopupMenuM.commandText((-1019));
      assertEquals("fook", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(18);
      assertEquals("fook", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(5);
      assertEquals("fook", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JPopupMenuM.commandText(1);
      assertEquals("fook", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JTable jTable0 = new JTable((TableModel) null);
      assertNotNull(jTable0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, (RowModel) null);
      assertNotNull(jPopupMenuM0);
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.getFolder();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JTable jTable0 = new JTable((TableModel) null);
      assertNotNull(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, (RowModel) null);
      assertNotNull(jPopupMenuM0);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      
      jPopupMenuM0.commandSingle(13, (Job) null);
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusCycleRoot());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TableModelJobs tableModelJobs0 = new TableModelJobs((JobList) null);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(13, TableModelJobs.NAME);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(0, TableModelJobs.NUMB);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(16, TableModelJobs.AKAN);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(7, TableModelJobs.AEPS);
      assertNotNull(tableModelJobs0);
      assertEquals(35, tableModelJobs0.getColumnCount());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, tableModelJobs0);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(13, TableModelJobs.NAME);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(0, TableModelJobs.NUMB);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(16, TableModelJobs.AKAN);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(7, TableModelJobs.AEPS);
      assertNotNull(jPopupMenuM0);
      assertEquals(35, tableModelJobs0.getColumnCount());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.commandSingle(4, (Job) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rules rules0 = new Rules();
      assertEquals(3, Rules.M_FALLB);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(1, Rules.M_RULES);
      assertEquals(0, Rules.M_NOREN);
      assertNotNull(rules0);
      assertEquals("#MOVE", rules0.getMov());
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      
      JPanelOptRls jPanelOptRls0 = new JPanelOptRls(rules0);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(1, Rules.M_RULES);
      assertEquals(0, Rules.M_NOREN);
      assertNotNull(jPanelOptRls0);
      assertEquals("#MOVE", rules0.getMov());
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertFalse(jPanelOptRls0.getIgnoreRepaint());
      assertFalse(jPanelOptRls0.isFocusCycleRoot());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicySet());
      assertTrue(jPanelOptRls0.getFocusTraversalKeysEnabled());
      
      JTableSortable jTableSortable0 = (JTableSortable)jPanelOptRls0.jtDef;
      assertNotNull(jTableSortable0);
      assertFalse(jTableSortable0.getIgnoreRepaint());
      assertFalse(jTableSortable0.isFocusTraversalPolicySet());
      assertTrue(jTableSortable0.getFocusTraversalKeysEnabled());
      assertFalse(jTableSortable0.isFocusCycleRoot());
      assertFalse(jTableSortable0.isFocusTraversalPolicyProvider());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTableSortable0, (RowModel) null);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(1, Rules.M_RULES);
      assertEquals(0, Rules.M_NOREN);
      assertNotNull(jPopupMenuM0);
      assertEquals("#MOVE", rules0.getMov());
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertFalse(jPanelOptRls0.getIgnoreRepaint());
      assertFalse(jPanelOptRls0.isFocusCycleRoot());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicyProvider());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicySet());
      assertTrue(jPanelOptRls0.getFocusTraversalKeysEnabled());
      assertFalse(jTableSortable0.getIgnoreRepaint());
      assertFalse(jTableSortable0.isFocusTraversalPolicySet());
      assertTrue(jTableSortable0.getFocusTraversalKeysEnabled());
      assertFalse(jTableSortable0.isFocusCycleRoot());
      assertFalse(jTableSortable0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.commandSingle(2, (Job) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rules rules0 = new Rules();
      assertEquals(0, Rules.M_NOREN);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(1, Rules.M_RULES);
      assertNotNull(rules0);
      assertEquals("#MOVE", rules0.getMov());
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      
      JPanelOptRls jPanelOptRls0 = new JPanelOptRls(rules0);
      assertEquals(0, Rules.M_NOREN);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(1, Rules.M_RULES);
      assertNotNull(jPanelOptRls0);
      assertEquals("#MOVE", rules0.getMov());
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertFalse(jPanelOptRls0.getIgnoreRepaint());
      assertTrue(jPanelOptRls0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicySet());
      assertFalse(jPanelOptRls0.isFocusCycleRoot());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicyProvider());
      
      JTableSortable jTableSortable0 = (JTableSortable)jPanelOptRls0.jtDef;
      assertNotNull(jTableSortable0);
      assertFalse(jTableSortable0.getIgnoreRepaint());
      assertFalse(jTableSortable0.isFocusCycleRoot());
      assertFalse(jTableSortable0.isFocusTraversalPolicyProvider());
      assertFalse(jTableSortable0.isFocusTraversalPolicySet());
      assertTrue(jTableSortable0.getFocusTraversalKeysEnabled());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTableSortable0, (RowModel) null);
      assertEquals(0, Rules.M_NOREN);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(1, Rules.M_RULES);
      assertNotNull(jPopupMenuM0);
      assertEquals("#MOVE", rules0.getMov());
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertFalse(jPanelOptRls0.getIgnoreRepaint());
      assertTrue(jPanelOptRls0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicySet());
      assertFalse(jPanelOptRls0.isFocusCycleRoot());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicyProvider());
      assertFalse(jTableSortable0.getIgnoreRepaint());
      assertFalse(jTableSortable0.isFocusCycleRoot());
      assertFalse(jTableSortable0.isFocusTraversalPolicyProvider());
      assertFalse(jTableSortable0.isFocusTraversalPolicySet());
      assertTrue(jTableSortable0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      
      jPopupMenuM0.command0((-1909), (Job) null, "");
      assertEquals(0, Rules.M_NOREN);
      assertEquals(2, Rules.M_ANIDB);
      assertEquals(3, Rules.M_FALLB);
      assertEquals(1, Rules.M_RULES);
      assertEquals("#MOVE", rules0.getMov());
      assertEquals("#RENAME\n#DO SET '%ann - %enr - %epn '\n#IF G(!unknown) DO ADD '[%grp]'\n#ELSE DO ADD '[RAW]'", rules0.getRen());
      assertFalse(jPanelOptRls0.getIgnoreRepaint());
      assertTrue(jPanelOptRls0.getFocusTraversalKeysEnabled());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicySet());
      assertFalse(jPanelOptRls0.isFocusCycleRoot());
      assertFalse(jPanelOptRls0.isFocusTraversalPolicyProvider());
      assertFalse(jTableSortable0.getIgnoreRepaint());
      assertFalse(jTableSortable0.isFocusCycleRoot());
      assertFalse(jTableSortable0.isFocusTraversalPolicyProvider());
      assertFalse(jTableSortable0.isFocusTraversalPolicySet());
      assertTrue(jTableSortable0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JobList jobList0 = new JobList();
      assertEquals(2, JobList.NIO);
      assertEquals(1, JobList.DIO);
      assertEquals(0, JobList.I_ERR);
      assertNotNull(jobList0);
      assertEquals(0, jobList0.size());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, jobList0.jlm);
      assertEquals(2, JobList.NIO);
      assertEquals(1, JobList.DIO);
      assertEquals(0, JobList.I_ERR);
      assertNotNull(jPopupMenuM0);
      assertEquals(0, jobList0.size());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.command0(21, (Job) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<JTableJobs> vector0 = new Vector<JTableJobs>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      TableModelDS tableModelDS0 = new TableModelDS(vector0, "", "pM");
      assertEquals(2, TableModelDS.DST);
      assertEquals(1, TableModelDS.SRC);
      assertEquals(0, TableModelDS.SEL);
      assertNotNull(tableModelDS0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, tableModelDS0.getRowCount());
      assertEquals(3, tableModelDS0.getColumnCount());
      
      JTable jTable0 = new JTable(tableModelDS0);
      assertEquals(2, TableModelDS.DST);
      assertEquals(1, TableModelDS.SRC);
      assertEquals(0, TableModelDS.SEL);
      assertNotNull(jTable0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, tableModelDS0.getRowCount());
      assertEquals(3, tableModelDS0.getColumnCount());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, (RowModel) null);
      assertEquals(2, TableModelDS.DST);
      assertEquals(1, TableModelDS.SRC);
      assertEquals(0, TableModelDS.SEL);
      assertNotNull(jPopupMenuM0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, tableModelDS0.getRowCount());
      assertEquals(3, tableModelDS0.getColumnCount());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      
      String string0 = "9\\um)Rf6";
      // Undeclared exception!
      try { 
        jPopupMenuM0.command0(19, (Job) null, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      assertNotNull(jTable0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      
      TableModelJobs tableModelJobs0 = new TableModelJobs((JobList) null);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(13, TableModelJobs.NAME);
      assertEquals(0, TableModelJobs.NUMB);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(7, TableModelJobs.AEPS);
      assertEquals(16, TableModelJobs.AKAN);
      assertNotNull(tableModelJobs0);
      assertEquals(35, tableModelJobs0.getColumnCount());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, tableModelJobs0);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(13, TableModelJobs.NAME);
      assertEquals(0, TableModelJobs.NUMB);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(7, TableModelJobs.AEPS);
      assertEquals(16, TableModelJobs.AKAN);
      assertNotNull(jPopupMenuM0);
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(35, tableModelJobs0.getColumnCount());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.command0(12, (Job) null, "TRUNCATE<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, (RowModel) null);
      assertNotNull(jPopupMenuM0);
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.command0(9, (Job) null, "i4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, (RowModel) null);
      assertNotNull(jPopupMenuM0);
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.command0(8, (Job) null, "i4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      assertNotNull(defaultTableModel0);
      
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      assertNotNull(defaultTableColumnModel0);
      
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      assertNotNull(jTable0);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      
      TableModelJobs tableModelJobs0 = new TableModelJobs((JobList) null);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(7, TableModelJobs.AEPS);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(16, TableModelJobs.AKAN);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(0, TableModelJobs.NUMB);
      assertEquals(13, TableModelJobs.NAME);
      assertNotNull(tableModelJobs0);
      assertEquals(35, tableModelJobs0.getColumnCount());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, tableModelJobs0);
      assertEquals(10, TableModelJobs.FLEN);
      assertEquals(35, TableModelJobs.ccnt);
      assertEquals(12, TableModelJobs.PATH);
      assertEquals(24, TableModelJobs.GSHO);
      assertEquals(23, TableModelJobs.GNAM);
      assertEquals(4, TableModelJobs.EIDN);
      assertEquals(34, TableModelJobs.AYEN);
      assertEquals(21, TableModelJobs.EKAN);
      assertEquals(7, TableModelJobs.AEPS);
      assertEquals(1, TableModelJobs.LIDN);
      assertEquals(22, TableModelJobs.EROM);
      assertEquals(16, TableModelJobs.AKAN);
      assertEquals(29, TableModelJobs.FRES);
      assertEquals(15, TableModelJobs.AROM);
      assertEquals(8, TableModelJobs.ALEP);
      assertEquals(6, TableModelJobs.AYEA);
      assertEquals(3, TableModelJobs.AIDN);
      assertEquals(26, TableModelJobs.FSUB);
      assertEquals(20, TableModelJobs.EENG);
      assertEquals(27, TableModelJobs.FSRC);
      assertEquals(18433L, TableModelJobs.MASK);
      assertEquals(32, TableModelJobs.FMDS);
      assertEquals(2, TableModelJobs.FIDN);
      assertEquals(5, TableModelJobs.GIDN);
      assertEquals(28, TableModelJobs.FQUA);
      assertEquals(17, TableModelJobs.AENG);
      assertEquals(30, TableModelJobs.FVID);
      assertEquals(31, TableModelJobs.FAUD);
      assertEquals(25, TableModelJobs.FDUB);
      assertEquals(11, TableModelJobs.FILE);
      assertEquals(33, TableModelJobs.FMDA);
      assertEquals(14, TableModelJobs.STAT);
      assertEquals(9, TableModelJobs.FSIZ);
      assertEquals(18, TableModelJobs.ATYP);
      assertEquals(19, TableModelJobs.ENUM);
      assertEquals((-1), TableModelJobs.JOB);
      assertEquals(0, TableModelJobs.NUMB);
      assertEquals(13, TableModelJobs.NAME);
      assertNotNull(jPopupMenuM0);
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertEquals(35, tableModelJobs0.getColumnCount());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.command0(6, (Job) null, "TRUNCATE<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      TableModelDS tableModelDS0 = new TableModelDS(vector0, "", "");
      assertFalse(vector0.contains(""));
      assertEquals(0, TableModelDS.SEL);
      assertEquals(1, TableModelDS.SRC);
      assertEquals(2, TableModelDS.DST);
      assertNotNull(tableModelDS0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(3, tableModelDS0.getColumnCount());
      assertEquals(1, tableModelDS0.getRowCount());
      
      JTable jTable0 = new JTable(tableModelDS0);
      assertFalse(vector0.contains(""));
      assertEquals(0, TableModelDS.SEL);
      assertEquals(1, TableModelDS.SRC);
      assertEquals(2, TableModelDS.DST);
      assertNotNull(jTable0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(3, tableModelDS0.getColumnCount());
      assertEquals(1, tableModelDS0.getRowCount());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, (RowModel) null);
      assertFalse(vector0.contains(""));
      assertEquals(0, TableModelDS.SEL);
      assertEquals(1, TableModelDS.SRC);
      assertEquals(2, TableModelDS.DST);
      assertNotNull(jPopupMenuM0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(3, tableModelDS0.getColumnCount());
      assertEquals(1, tableModelDS0.getRowCount());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      
      jPopupMenuM0.command0(2, (Job) null, "");
      assertFalse(vector0.contains(""));
      assertEquals(0, TableModelDS.SEL);
      assertEquals(1, TableModelDS.SRC);
      assertEquals(2, TableModelDS.DST);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(3, tableModelDS0.getColumnCount());
      assertEquals(1, tableModelDS0.getRowCount());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.isFocusCycleRoot());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 0);
      assertNotNull(defaultTableModel0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      JTable jTable0 = new JTable(defaultTableModel0);
      assertNotNull(jTable0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      
      JobList jobList0 = new JobList();
      assertEquals(2, JobList.NIO);
      assertEquals(0, JobList.I_ERR);
      assertEquals(1, JobList.DIO);
      assertNotNull(jobList0);
      assertEquals(0, jobList0.size());
      
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, jobList0.jlm);
      assertEquals(2, JobList.NIO);
      assertEquals(0, JobList.I_ERR);
      assertEquals(1, JobList.DIO);
      assertNotNull(jPopupMenuM0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(jTable0.isFocusTraversalPolicyProvider());
      assertFalse(jTable0.getIgnoreRepaint());
      assertFalse(jTable0.isFocusTraversalPolicySet());
      assertTrue(jTable0.getFocusTraversalKeysEnabled());
      assertFalse(jTable0.isFocusCycleRoot());
      assertEquals(0, jobList0.size());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      
      // Undeclared exception!
      try { 
        jPopupMenuM0.command0(0, (Job) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.JobMan", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, (RowModel) null);
      assertNotNull(jPopupMenuM0);
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
      
      Job[] jobArray0 = new Job[0];
      jPopupMenuM0.command(182, jobArray0, "zM*D?kzuW}({p");
      assertEquals(0, jobArray0.length);
      assertFalse(jPopupMenuM0.getIgnoreRepaint());
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
      assertFalse(jPopupMenuM0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 0);
      JTable jTable0 = new JTable(defaultTableModel0);
      JobList jobList0 = new JobList();
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, jobList0.jlm);
      Job[] jobArray0 = new Job[8];
      jPopupMenuM0.command(1, jobArray0, "");
      assertFalse(jPopupMenuM0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      TableModelDS tableModelDS0 = new TableModelDS(vector0, "", "");
      JTable jTable0 = new JTable(tableModelDS0);
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, (RowModel) null);
      jTable0.selectAll();
      ActionEvent actionEvent0 = new ActionEvent(vector0, 0, (String) null, 0, 17891330);
      // Undeclared exception!
      try { 
        jPopupMenuM0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      TableModelDS tableModelDS0 = new TableModelDS(vector0, "", "");
      JTable jTable0 = new JTable(tableModelDS0);
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, (RowModel) null);
      ActionEvent actionEvent0 = new ActionEvent(vector0, 0, (String) null, 0, 17891330);
      jPopupMenuM0.actionPerformed(actionEvent0);
      assertEquals(0L, actionEvent0.getWhen());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, (RowModel) null);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jInternalFrame0, 551, (-3086L), (-1), (-793), (-1), 210, false, menuElementArray0, menuSelectionManager0);
      // Undeclared exception!
      try { 
        jPopupMenuM0.mouseClicked(menuDragMouseEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.arucard21.epox.webaom.ui.JPopupMenuM", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      JTable jTable0 = new JTable(stack0, stack0);
      JobList jobList0 = new JobList();
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, jobList0.jlm);
      MouseEvent mouseEvent0 = new MouseEvent(jTable0, 24, 0L, 0, 15, 16, 9, 475, 33, false, 1);
      jPopupMenuM0.mouseClicked(mouseEvent0);
      assertFalse(jPopupMenuM0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rules rules0 = new Rules();
      JPanelOptRls jPanelOptRls0 = new JPanelOptRls(rules0);
      JTableSortable jTableSortable0 = (JTableSortable)jPanelOptRls0.jtDef;
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTableSortable0, (RowModel) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jPanelOptRls0, (-3877), 1, 19, 0, 12, 17, 11, 0, false, 21, 32, 2239, (-2835.026255078322));
      jPopupMenuM0.mouseReleased(mouseWheelEvent0);
      assertFalse(mouseWheelEvent0.isMetaDown());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, 0);
      JTable jTable0 = new JTable(defaultTableModel0);
      JobList jobList0 = new JobList();
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTable0, jobList0.jlm);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jPopupMenuM0, (-119), 1, 2, 10, 21037058, 21037058, 14, 18, false, (-119), (-3096), 3);
      jPopupMenuM0.mousePressed(mouseWheelEvent0);
      assertEquals(3, mouseWheelEvent0.getWheelRotation());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM((JTable) null, (RowModel) null);
      jPopupMenuM0.stop();
      assertFalse(jPopupMenuM0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Rules rules0 = new Rules();
      JPanelOptRls jPanelOptRls0 = new JPanelOptRls(rules0);
      JTableSortable jTableSortable0 = (JTableSortable)jPanelOptRls0.jtDef;
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTableSortable0, (RowModel) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jPanelOptRls0, (-3877), 1, 19, 0, 12, 17, 11, 0, false, 21, 32, 2239, (-2835.026255078322));
      jPopupMenuM0.mouseExited(mouseWheelEvent0);
      assertEquals((-3877), mouseWheelEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Rules rules0 = new Rules();
      JPanelOptRls jPanelOptRls0 = new JPanelOptRls(rules0);
      JTableSortable jTableSortable0 = (JTableSortable)jPanelOptRls0.jtDef;
      JPopupMenuM jPopupMenuM0 = new JPopupMenuM(jTableSortable0, (RowModel) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jPanelOptRls0, (-3877), 1, 19, 0, 12, 17, 11, 0, false, 21, 32, 2239, (-2835.026255078322));
      jPopupMenuM0.mouseEntered(mouseWheelEvent0);
      assertEquals(0, mouseWheelEvent0.getClickCount());
  }
}
