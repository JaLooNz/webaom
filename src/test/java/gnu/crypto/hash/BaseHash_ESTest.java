/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:07:35 GMT 2018
 */

package gnu.crypto.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gnu.crypto.hash.BaseHash;
import gnu.crypto.hash.MD4;
import gnu.crypto.hash.Tiger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseHash_ESTest extends BaseHash_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.name = "0123456789ABCDEF";
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      byte byte0 = (byte) (-52);
      tiger0.update((byte) (-52));
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.blockSize = 4;
      assertEquals("md4", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.name = "0123456789ABCDEF";
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.update((byte) (-52));
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.count = 824L;
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.update((byte) (-52));
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byte byte1 = (byte) (-7);
      mD4_0.update((byte) (-52));
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      int int0 = tiger0.hashSize();
      assertEquals(24, int0);
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.resetContext();
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      mD4_0.name = "";
      assertEquals(4, mD4_0.blockSize());
      assertEquals("", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      tiger0.resetContext();
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byte byte0 = (byte) (-52);
      tiger0.hashSize = (-47);
      assertEquals("tiger", tiger0.name());
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.update((byte) (-52));
      assertEquals("tiger", tiger0.name());
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      byte byte1 = (byte)15;
      tiger0.update((byte)15);
      assertEquals("tiger", tiger0.name());
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals("tiger", tiger0.name());
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.blockSize = 4;
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.update((byte) (-52));
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      tiger0.update(byteArray1, 4, 0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("tiger", tiger0.name());
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      mD4_0.update((byte)0);
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_0, mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_1.name());
      assertEquals(64, mD4_1.blockSize());
      assertEquals(16, mD4_1.hashSize());
      
      int int0 = tiger0.hashSize();
      assertEquals((-47), int0);
      assertEquals("tiger", tiger0.name());
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      int int1 = 2105;
      int int2 = (-2674);
      mD4_0.update((byte) (-52));
      assertNotSame(mD4_0, mD4_1);
      assertFalse(mD4_0.equals((Object)mD4_1));
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      // Undeclared exception!
      try { 
        mD4_0.update(byteArray1, 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = (byte) (-52);
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.blockSize = 4;
      assertEquals("md4", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.name = "0123456789ABCDEF";
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.update((byte) (-52));
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      mD4_0.update((byte)0);
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_0, mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(16, mD4_1.hashSize());
      assertEquals(64, mD4_1.blockSize());
      assertEquals("md4", mD4_1.name());
      
      int int0 = (-2674);
      // Undeclared exception!
      try { 
        mD4_0.update(byteArray0, 0, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray0 = null;
      mD4_0.buffer = null;
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray1 = mD4_0.padBuffer();
      assertNotNull(byteArray1);
      assertEquals(64, byteArray1.length);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      // Undeclared exception!
      try { 
        mD4_0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.name = "0123456789ABCDEF";
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byte byte0 = (byte) (-52);
      tiger0.update((byte) (-52));
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byte byte1 = (byte)15;
      tiger0.update((byte)15);
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.blockSize = 4;
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.name = "0123456789ABCDEF";
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.update((byte) (-52));
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)15;
      mD4_0.count = 818L;
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byteArray1[1] = (byte)15;
      mD4_0.update((byte) (-87));
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      tiger0.update(byteArray1, 4, 0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      mD4_0.update((byte)0);
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertNotSame(mD4_0, mD4_1);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals(16, mD4_1.hashSize());
      assertEquals(64, mD4_1.blockSize());
      assertEquals("md4", mD4_1.name());
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      int int0 = tiger0.hashSize();
      assertEquals(24, int0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.resetContext();
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.resetContext();
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      mD4_0.name = "";
      assertEquals(4, mD4_0.blockSize());
      assertEquals("", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      tiger0.resetContext();
      assertEquals(24, tiger0.hashSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.name = "0123456789ABCDEF";
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      
      byte byte0 = (byte) (-52);
      tiger0.hashSize = (-47);
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      
      tiger0.update((byte) (-52));
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      
      byte byte1 = (byte)15;
      tiger0.update((byte)15);
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.blockSize = 4;
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.name = "0123456789ABCDEF";
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.update((byte) (-52));
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      tiger0.update(byteArray1, 4, 0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      
      mD4_0.update((byte)0);
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertNotSame(mD4_0, mD4_1);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals(64, mD4_1.blockSize());
      assertEquals("md4", mD4_1.name());
      assertEquals(16, mD4_1.hashSize());
      assertEquals(4, mD4_0.blockSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      int int0 = tiger0.hashSize();
      assertEquals((-47), int0);
      assertEquals((-47), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      
      int int1 = 2105;
      int int2 = (-2674);
      // Undeclared exception!
      try { 
        mD4_0.update(byteArray1, 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      byte[] byteArray0 = new byte[2];
      mD4_0.blockSize = 18;
      assertEquals("md4", mD4_0.name());
      assertEquals(18, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byteArray0[0] = (byte)46;
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals("md4", mD4_0.name());
      assertEquals(18, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("gnu.crypto.hash.MD4", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.name = "0123456789ABCDEF";
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte byte0 = (byte) (-52);
      tiger0.update((byte) (-52));
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte byte1 = (byte)15;
      tiger0.update((byte)15);
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.blockSize = 4;
      assertEquals(16, mD4_0.hashSize());
      assertEquals(4, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.name = "0123456789ABCDEF";
      assertEquals(16, mD4_0.hashSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      
      mD4_0.update((byte) (-52));
      assertEquals(16, mD4_0.hashSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      tiger0.update(byteArray1, 4, 0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      mD4_0.update((byte)0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertNotSame(mD4_0, mD4_1);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals("md4", mD4_1.name());
      assertEquals(64, mD4_1.blockSize());
      assertEquals(16, mD4_1.hashSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("0123456789ABCDEF", mD4_0.name());
      assertEquals(4, mD4_0.blockSize());
      
      int int0 = tiger0.hashSize();
      assertEquals(24, int0);
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.resetContext();
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.resetContext();
      assertEquals(64, tiger0.blockSize());
      assertEquals("0123456789ABCDEF", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("gnu.crypto.hash.MD4", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.update(byteArray0, (-467), (-467));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.resetContext();
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.resetContext();
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      mD4_0.resetContext();
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      byteArray1[0] = (byte) (-58);
      mD4_0.blockSize = 157;
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(157, mD4_0.blockSize());
      
      byteArray1[1] = (byte)115;
      byteArray1[2] = (byte)30;
      byteArray1[3] = (byte)118;
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)60;
      // Undeclared exception!
      try { 
        mD4_0.update(byteArray1, (int) (byte) (-58), (int) (byte)118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.blockSize = 1052;
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(1052, tiger0.blockSize());
      
      tiger0.blockSize = 2095;
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(2095, tiger0.blockSize());
      
      tiger0.hashSize = 0;
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.hashSize());
      assertEquals(2095, tiger0.blockSize());
      
      int int0 = tiger0.hashSize();
      assertEquals(0, int0);
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.hashSize());
      assertEquals(2095, tiger0.blockSize());
      
      tiger0.blockSize = 1052;
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.hashSize());
      assertEquals(1052, tiger0.blockSize());
      
      byte[] byteArray0 = new byte[0];
      String string0 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        BaseHash.toString(byteArray0, 1052, 2095);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1052
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray0 = null;
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.name = "";
      assertEquals(64, mD4_0.blockSize());
      assertEquals("", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      int int0 = 15;
      mD4_0.name = "";
      assertEquals(64, mD4_0.blockSize());
      assertEquals("", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      // Undeclared exception!
      try { 
        mD4_0.update((byte[]) null, 15, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertNotNull(tiger1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals("tiger", tiger1.name());
      assertEquals(24, tiger1.hashSize());
      assertEquals(64, tiger1.blockSize());
      
      tiger0.reset();
      assertNotSame(tiger0, tiger1);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[2];
      Tiger tiger2 = (Tiger)tiger0.clone();
      assertNotNull(tiger2);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger0, tiger2);
      assertNotSame(tiger2, tiger0);
      assertNotSame(tiger2, tiger1);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(tiger2.equals((Object)tiger0));
      assertFalse(tiger2.equals((Object)tiger1));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals("tiger", tiger2.name());
      assertEquals(64, tiger2.blockSize());
      assertEquals(24, tiger2.hashSize());
      
      byteArray1[0] = (byte)79;
      tiger0.hashSize = (int) (byte)79;
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(79, tiger0.hashSize());
      
      tiger0.blockSize = 159;
      assertEquals("tiger", tiger0.name());
      assertEquals(79, tiger0.hashSize());
      assertEquals(159, tiger0.blockSize());
      
      tiger0.blockSize = (-44);
      assertEquals((-44), tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(79, tiger0.hashSize());
      
      boolean boolean0 = tiger0.selfTest();
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger0, tiger2);
      assertTrue(boolean0);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(tiger0.equals((Object)tiger2));
      assertEquals((-44), tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(79, tiger0.hashSize());
      
      byteArray1[1] = (byte) (-10);
      tiger0.reset();
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger0, tiger2);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(tiger0.equals((Object)tiger2));
      assertEquals((-44), tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(79, tiger0.hashSize());
      
      tiger0.resetContext();
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger0, tiger2);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(tiger0.equals((Object)tiger2));
      assertEquals((-44), tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(79, tiger0.hashSize());
      
      // Undeclared exception!
      try { 
        BaseHash.toString((byte[]) null, 245, 634);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.blockSize = 0;
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("00", string0);
      assertEquals(1, byteArray0.length);
      
      tiger0.hashSize = 1655;
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      assertEquals(1655, tiger0.hashSize());
      
      String string1 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string1);
      assertEquals("00", string1);
      assertEquals(1, byteArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = tiger0.selfTest();
      assertTrue(boolean0);
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      assertEquals(1655, tiger0.hashSize());
      
      tiger0.hashSize = 0;
      assertEquals(0, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      
      tiger0.reset();
      assertEquals(0, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertNotNull(tiger1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertEquals(0, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      assertEquals(24, tiger1.hashSize());
      assertEquals("tiger", tiger1.name());
      assertEquals(64, tiger1.blockSize());
      
      int int0 = tiger0.blockSize();
      assertNotSame(tiger0, tiger1);
      assertEquals(0, int0);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(0, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      
      tiger0.resetContext();
      assertNotSame(tiger0, tiger1);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(0, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      
      String string2 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string2);
      assertEquals("00", string2);
      assertEquals(1, byteArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      // Undeclared exception!
      try { 
        tiger0.transform(byteArray1, 3030);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3030
         //
         verifyException("gnu.crypto.hash.Tiger", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      mD4_0.count = (-2112L);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byteArray0[1] = (byte)0;
      mD4_0.update((byte)0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.blockSize = 63;
      assertEquals(63, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.name = null;
      assertEquals(63, mD4_0.blockSize());
      assertNull(mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      String string0 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("BA00", string0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = mD4_0.selfTest();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(63, mD4_0.blockSize());
      assertNull(mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      String string1 = mD4_0.name();
      assertNull(string1);
      assertEquals(63, mD4_0.blockSize());
      assertNull(mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte byte0 = (byte)42;
      tiger0.update((byte)42);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray0 = new byte[3];
      int int0 = 0;
      String string0 = BaseHash.toString(byteArray0, 0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("00", string0);
      assertEquals(3, byteArray0.length);
      
      tiger0.update((byte)0);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byteArray0[0] = (byte)0;
      tiger0.reset();
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byteArray0[1] = (byte) (-92);
      tiger0.reset();
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray1 = tiger0.digest();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byteArray0[2] = (byte) (-115);
      tiger0.buffer = byteArray0;
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      // Undeclared exception!
      try { 
        BaseHash.toString(byteArray0, 1, 2217);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray0 = new byte[0];
      mD4_0.reset();
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      String string0 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      mD4_0.reset();
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_0, mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_1.name());
      assertEquals(16, mD4_1.hashSize());
      assertEquals(64, mD4_1.blockSize());
      
      String string1 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(0, byteArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertNotNull(tiger1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger1.blockSize());
      assertEquals(24, tiger1.hashSize());
      assertEquals("tiger", tiger1.name());
      
      byte[] byteArray1 = tiger0.getResult();
      assertNotNull(byteArray1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(24, byteArray1.length);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      tiger0.hashSize = 1;
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(1, tiger0.hashSize());
      
      byte[] byteArray2 = tiger0.padBuffer();
      assertNotNull(byteArray2);
      assertNotSame(tiger0, tiger1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(64, byteArray2.length);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(1, tiger0.hashSize());
      
      String string2 = tiger0.name();
      assertNotNull(string2);
      assertNotSame(tiger0, tiger1);
      assertEquals("tiger", string2);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(1, tiger0.hashSize());
      
      mD4_0.reset();
      assertNotSame(mD4_0, mD4_1);
      assertFalse(mD4_0.equals((Object)mD4_1));
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertNotNull(tiger1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals("tiger", tiger1.name());
      assertEquals(64, tiger1.blockSize());
      assertEquals(24, tiger1.hashSize());
      
      tiger0.count = 0L;
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      tiger0.hashSize = (-1652);
      assertEquals((-1652), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      String string0 = tiger0.name();
      assertNotNull(string0);
      assertNotSame(tiger0, tiger1);
      assertEquals("tiger", string0);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals((-1652), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      int int0 = tiger0.hashSize();
      assertNotSame(tiger0, tiger1);
      assertEquals((-1652), int0);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals((-1652), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      tiger0.resetContext();
      assertNotSame(tiger0, tiger1);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals((-1652), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      byte[] byteArray0 = mD4_0.digest();
      assertNotNull(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      byte[] byteArray1 = mD4_0.getResult();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(16, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.hashSize = (-1652);
      assertEquals("md4", mD4_0.name());
      assertEquals((-1652), mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      // Undeclared exception!
      try { 
        BaseHash.toString(byteArray1, 0, 776);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      byte[] byteArray0 = null;
      tiger0.buffer = null;
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      int int0 = 3854;
      tiger0.hashSize = 3854;
      assertEquals("tiger", tiger0.name());
      assertEquals(3854, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        tiger0.digest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertNotNull(tiger1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(64, tiger1.blockSize());
      assertEquals(24, tiger1.hashSize());
      assertEquals("tiger", tiger1.name());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertNotSame(tiger0, tiger1);
      assertEquals(24, byteArray0.length);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      String string0 = tiger0.name();
      assertNotNull(string0);
      assertNotSame(tiger0, tiger1);
      assertEquals("tiger", string0);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      tiger0.blockSize = (int) (byte)0;
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(0, tiger0.blockSize());
      
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)90;
      // Undeclared exception!
      try { 
        tiger0.update(byteArray0, (int) (byte)88, (int) (byte)88);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.reset();
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.blockSize = 0;
      assertEquals("md4", mD4_0.name());
      assertEquals(0, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = 1;
      tiger0.update(byteArray0, (int) (byte)0, 1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertNotNull(tiger1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals("tiger", tiger1.name());
      assertEquals(64, tiger1.blockSize());
      assertEquals(24, tiger1.hashSize());
      
      tiger0.resetContext();
      assertNotSame(tiger0, tiger1);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray1 = tiger0.digest();
      assertNotNull(byteArray1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(24, byteArray1.length);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      tiger0.name = "";
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("", tiger0.name());
      
      tiger0.reset();
      assertNotSame(tiger0, tiger1);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("", tiger0.name());
      
      tiger0.reset();
      assertNotSame(tiger0, tiger1);
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("", tiger0.name());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      byte[] byteArray2 = mD4_0.digest();
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(16, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      Tiger tiger2 = (Tiger)tiger0.clone();
      assertNotNull(tiger2);
      assertNotSame(tiger0, tiger2);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger2, tiger1);
      assertNotSame(tiger2, tiger0);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(tiger2.equals((Object)tiger1));
      assertFalse(tiger2.equals((Object)tiger0));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("", tiger0.name());
      assertEquals(24, tiger2.hashSize());
      assertEquals("tiger", tiger2.name());
      assertEquals(64, tiger2.blockSize());
      
      byte[] byteArray3 = mD4_0.digest();
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(16, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      tiger0.resetContext();
      assertNotSame(tiger0, tiger2);
      assertNotSame(tiger0, tiger1);
      assertFalse(tiger0.equals((Object)tiger2));
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("", tiger0.name());
      
      mD4_0.buffer = byteArray1;
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("", tiger0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      byte[] byteArray4 = mD4_0.getResult();
      assertNotNull(byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(16, byteArray4.length);
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      String string0 = tiger0.name();
      assertNotNull(string0);
      assertNotSame(tiger0, tiger2);
      assertNotSame(tiger0, tiger1);
      assertEquals("", string0);
      assertFalse(tiger0.equals((Object)tiger2));
      assertFalse(tiger0.equals((Object)tiger1));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("", tiger0.name());
      
      String string1 = BaseHash.toString(byteArray3, (int) (byte)0, (int) (byte)0);
      assertNotNull(string1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertEquals("", string1);
      assertEquals(16, byteArray3.length);
      assertTrue(string1.equals((Object)string0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.resetContext();
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.update((byte)0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertNotSame(mD4_0, mD4_1);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals(64, mD4_1.blockSize());
      assertEquals("md4", mD4_1.name());
      assertEquals(16, mD4_1.hashSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      MD4 mD4_2 = (MD4)mD4_0.clone();
      assertNotNull(mD4_2);
      assertNotSame(mD4_2, mD4_0);
      assertNotSame(mD4_2, mD4_1);
      assertNotSame(mD4_0, mD4_1);
      assertNotSame(mD4_0, mD4_2);
      assertFalse(mD4_2.equals((Object)mD4_0));
      assertFalse(mD4_2.equals((Object)mD4_1));
      assertFalse(mD4_0.equals((Object)mD4_1));
      assertEquals(16, mD4_2.hashSize());
      assertEquals("md4", mD4_2.name());
      assertEquals(64, mD4_2.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      // Undeclared exception!
      try { 
        mD4_0.reset();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-75);
      String string0 = BaseHash.toString(byteArray0, (int) (byte) (-26), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)52, (byte) (-26), (byte)1, (byte) (-75)}, byteArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(5, byteArray0.length);
      
      mD4_0.reset();
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      tiger0.update((byte) (-29));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_0, mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_1.name());
      assertEquals(64, mD4_1.blockSize());
      assertEquals(16, mD4_1.hashSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.hashSize = (-1688);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals((-1688), mD4_0.hashSize());
      
      mD4_0.hashSize = 2301;
      assertEquals("md4", mD4_0.name());
      assertEquals(2301, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.name = "gnu.crypto.hash.Tiger";
      assertEquals("gnu.crypto.hash.Tiger", mD4_0.name());
      assertEquals(2301, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.blockSize = 0;
      assertEquals("gnu.crypto.hash.Tiger", mD4_0.name());
      assertEquals(2301, mD4_0.hashSize());
      assertEquals(0, mD4_0.blockSize());
      
      String string0 = mD4_0.name();
      assertNotNull(string0);
      assertEquals("gnu.crypto.hash.Tiger", string0);
      assertEquals("gnu.crypto.hash.Tiger", mD4_0.name());
      assertEquals(2301, mD4_0.hashSize());
      assertEquals(0, mD4_0.blockSize());
      
      mD4_0.hashSize = (-2291);
      assertEquals((-2291), mD4_0.hashSize());
      assertEquals("gnu.crypto.hash.Tiger", mD4_0.name());
      assertEquals(0, mD4_0.blockSize());
      
      // Undeclared exception!
      try { 
        mD4_0.update((byte) (-117));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      String string0 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("4E00000000000000", string0);
      assertEquals(8, byteArray0.length);
      
      byteArray0[2] = (byte)0;
      mD4_0.count = (-1013L);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)119;
      String string1 = BaseHash.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)78, (byte)0, (byte)0, (byte)54, (byte) (-37), (byte)0, (byte)119, (byte)0}, byteArray0);
      assertNotNull(string1);
      assertEquals("4E000036DB007700", string1);
      assertEquals(8, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        mD4_0.update((byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -53
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.update((byte) (-115));
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_0, mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_1.blockSize());
      assertEquals(16, mD4_1.hashSize());
      assertEquals("md4", mD4_1.name());
      
      boolean boolean0 = mD4_0.selfTest();
      assertNotSame(mD4_0, mD4_1);
      assertTrue(boolean0);
      assertFalse(mD4_0.equals((Object)mD4_1));
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      tiger0.update(byteArray0, (-950), (int) (byte) (-115));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      // Undeclared exception!
      try { 
        tiger0.transform(byteArray0, 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 79
         //
         verifyException("gnu.crypto.hash.Tiger", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)5;
      // Undeclared exception!
      try { 
        mD4_0.update(byteArray0, 47, (int) (byte)5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray0 = new byte[0];
      tiger0.count = 3414L;
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.update(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.buffer = byteArray0;
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.buffer = byteArray0;
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray1 = mD4_0.getResult();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(16, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      // Undeclared exception!
      try { 
        BaseHash.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      // Undeclared exception!
      try { 
        tiger0.update(byteArray0, (int) (byte) (-63), 1633);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      tiger0.name = null;
      assertNull(tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.hashSize = 15;
      assertNull(tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(15, tiger0.hashSize());
      
      tiger0.name = "3293AC630C13F0245F92BBB1766E16167A4E58492DDE73F3";
      assertEquals("3293AC630C13F0245F92BBB1766E16167A4E58492DDE73F3", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(15, tiger0.hashSize());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      tiger0.hashSize = 15;
      assertEquals("3293AC630C13F0245F92BBB1766E16167A4E58492DDE73F3", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(15, tiger0.hashSize());
      
      byteArray1[0] = (byte) (-83);
      byte[] byteArray2 = tiger0.digest();
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(24, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals("3293AC630C13F0245F92BBB1766E16167A4E58492DDE73F3", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(15, tiger0.hashSize());
      
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)15;
      // Undeclared exception!
      try { 
        BaseHash.toString(byteArray1, (int) (byte)0, (int) (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      int int0 = mD4_0.hashSize();
      assertEquals(16, int0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.blockSize = (-1473);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals((-1473), mD4_0.blockSize());
      
      int int0 = mD4_0.blockSize();
      assertEquals((-1473), int0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals((-1473), mD4_0.blockSize());
      
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.hashSize = (-302);
      assertEquals("tiger", tiger0.name());
      assertEquals((-302), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.resetContext();
      assertEquals("tiger", tiger0.name());
      assertEquals((-302), tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.blockSize = (-944);
      assertEquals("tiger", tiger0.name());
      assertEquals((-302), tiger0.hashSize());
      assertEquals((-944), tiger0.blockSize());
      
      tiger0.update((byte) (-57));
      assertEquals("tiger", tiger0.name());
      assertEquals((-302), tiger0.hashSize());
      assertEquals((-944), tiger0.blockSize());
      
      tiger0.resetContext();
      assertEquals("tiger", tiger0.name());
      assertEquals((-302), tiger0.hashSize());
      assertEquals((-944), tiger0.blockSize());
      
      String string0 = tiger0.name();
      assertNotNull(string0);
      assertEquals("tiger", string0);
      assertEquals("tiger", tiger0.name());
      assertEquals((-302), tiger0.hashSize());
      assertEquals((-944), tiger0.blockSize());
      
      tiger0.reset();
      assertEquals("tiger", tiger0.name());
      assertEquals((-302), tiger0.hashSize());
      assertEquals((-944), tiger0.blockSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)70;
      // Undeclared exception!
      try { 
        mD4_0.transform(byteArray0, (-589));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -589
         //
         verifyException("gnu.crypto.hash.MD4", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      // Undeclared exception!
      try { 
        BaseHash.toString(byteArray0, (int) (byte)79, (int) (byte) (-100));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.resetContext();
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      byte[] byteArray0 = mD4_0.digest();
      assertNotNull(byteArray0);
      assertEquals(16, byteArray0.length);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.count = (-1879L);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      mD4_0.count = (-1879L);
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      String string0 = tiger0.name();
      assertNotNull(string0);
      assertEquals("tiger", string0);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byte[] byteArray0 = new byte[4];
      tiger0.update((byte)2);
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-117);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      int int0 = 1169;
      // Undeclared exception!
      try { 
        tiger0.update(byteArray0, 0, 1169);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      tiger0.reset();
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray0 = tiger0.padBuffer();
      assertNotNull(byteArray0);
      assertEquals(64, byteArray0.length);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray1 = tiger0.padBuffer();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray2 = tiger0.digest();
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(24, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      String string0 = tiger0.name();
      assertNotNull(string0);
      assertEquals("tiger", string0);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      String string1 = BaseHash.toString(byteArray1);
      assertNotNull(string1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string1);
      assertEquals(64, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray3 = mD4_0.padBuffer();
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(64, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      
      MD4 mD4_1 = (MD4)mD4_0.clone();
      assertNotNull(mD4_1);
      assertNotSame(mD4_0, mD4_1);
      assertNotSame(mD4_1, mD4_0);
      assertFalse(mD4_1.equals((Object)mD4_0));
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(16, mD4_1.hashSize());
      assertEquals(64, mD4_1.blockSize());
      assertEquals("md4", mD4_1.name());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-20);
      mD4_0.resetContext();
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)18;
      mD4_0.buffer = byteArray0;
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      boolean boolean1 = mD4_0.selfTest();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      byte[] byteArray1 = mD4_0.getResult();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(16, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      String string0 = BaseHash.toString(mD4_0.buffer);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte) (-119), (byte)0, (byte) (-115), (byte) (-20), (byte)0, (byte)18}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-65), (byte)0, (byte) (-119), (byte)0, (byte) (-115), (byte) (-20), (byte)0, (byte)18}, mD4_0.buffer);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(mD4_0.buffer, byteArray0);
      assertNotSame(mD4_0.buffer, byteArray1);
      assertEquals("BF0089008DEC0012", string0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, mD4_0.buffer.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(mD4_0.buffer.equals((Object)byteArray1));
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      mD4_0.update((byte) (-115));
      assertEquals(64, mD4_0.blockSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertNotNull(tiger1);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals("tiger", tiger1.name());
      assertEquals(24, tiger1.hashSize());
      assertEquals(64, tiger1.blockSize());
      
      Tiger tiger2 = (Tiger)tiger0.clone();
      assertNotNull(tiger2);
      assertNotSame(tiger0, tiger2);
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger2, tiger1);
      assertNotSame(tiger2, tiger0);
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(tiger2.equals((Object)tiger1));
      assertFalse(tiger2.equals((Object)tiger0));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals("tiger", tiger2.name());
      assertEquals(24, tiger2.hashSize());
      assertEquals(64, tiger2.blockSize());
      
      byte[] byteArray2 = tiger0.padBuffer();
      assertNotNull(byteArray2);
      assertNotSame(tiger0, tiger2);
      assertNotSame(tiger0, tiger1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(64, byteArray2.length);
      assertFalse(tiger0.equals((Object)tiger2));
      assertFalse(tiger0.equals((Object)tiger1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      
      // Undeclared exception!
      try { 
        mD4_0.reset();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals("md4", mD4_0.name());
      assertEquals(16, mD4_0.hashSize());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.hashSize = 1566;
      assertEquals(1566, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      mD4_0.update((byte) (-17));
      assertEquals(1566, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
      
      int int0 = mD4_0.blockSize();
      assertEquals(64, int0);
      assertEquals(1566, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      assertEquals(64, mD4_0.blockSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray0 = tiger0.digest();
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      String string0 = BaseHash.toString(byteArray0);
      assertNotNull(string0);
      assertEquals("3293AC630C13F0245F92BBB1766E16167A4E58492DDE73F3", string0);
      assertEquals(24, byteArray0.length);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      boolean boolean0 = tiger0.selfTest();
      assertTrue(boolean0);
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray1 = tiger0.padBuffer();
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(64, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray2 = tiger0.digest();
      assertNotNull(byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(24, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray3 = tiger0.digest();
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(24, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      assertNotNull(mD4_0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
      
      boolean boolean0 = mD4_0.selfTest();
      assertTrue(boolean0);
      assertEquals(64, mD4_0.blockSize());
      assertEquals(16, mD4_0.hashSize());
      assertEquals("md4", mD4_0.name());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertNotNull(tiger0);
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      tiger0.blockSize = 1427;
      assertEquals("tiger", tiger0.name());
      assertEquals(1427, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      // Undeclared exception!
      try { 
        tiger0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      MD4 mD4_0 = new MD4();
      mD4_0.count = 824L;
      int int0 = tiger0.hashSize();
      assertEquals(24, int0);
      
      mD4_0.digest();
      tiger0.getResult();
      tiger0.getResult();
      boolean boolean0 = mD4_0.selfTest();
      assertEquals(64, mD4_0.blockSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      String string0 = mD4_0.name();
      assertEquals(64, mD4_0.blockSize());
      assertNotNull(string0);
      assertEquals(16, mD4_0.hashSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      int int0 = tiger0.blockSize();
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MD4 mD4_0 = new MD4();
      mD4_0.blockSize = 4;
      mD4_0.count = 818L;
      mD4_0.update((byte) (-52));
      mD4_0.update((byte) (-52));
      // Undeclared exception!
      try { 
        mD4_0.digest();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("gnu.crypto.hash.MD4", e);
      }
  }
}
