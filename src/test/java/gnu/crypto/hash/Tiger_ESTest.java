/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:10:07 GMT 2018
 */

package gnu.crypto.hash;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import gnu.crypto.hash.Tiger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tiger_ESTest extends Tiger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertNotNull(tiger0);
      
      tiger0.update((byte) (-43));
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      
      byte[] byteArray0 = tiger0.digest();
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertNotNull(tiger0);
      
      tiger0.count = (-1356L);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      
      byte[] byteArray0 = tiger0.padBuffer();
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(76, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertNotNull(tiger0);
      
      tiger0.resetContext();
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertNotNull(tiger0);
      
      byte[] byteArray0 = tiger0.padBuffer();
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, byteArray0.length);
      assertNotNull(byteArray0);
      
      tiger0.transform(byteArray0, 0);
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertNotNull(tiger0);
      
      byte[] byteArray0 = tiger0.getResult();
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(24, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        tiger0.transform(byteArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("gnu.crypto.hash.Tiger", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertNotNull(tiger0);
      
      // Undeclared exception!
      try { 
        tiger0.transform((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("gnu.crypto.hash.Tiger", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertNotNull(tiger0);
      
      tiger0.count = 0L;
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      tiger0.count = 249L;
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      
      byte[] byteArray0 = tiger0.digest();
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertNotNull(tiger0);
      
      tiger0.buffer = null;
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger1.blockSize());
      assertEquals("tiger", tiger1.name());
      assertEquals(24, tiger1.hashSize());
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertNotNull(tiger1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertNotNull(tiger0);
      
      boolean boolean0 = tiger0.selfTest();
      assertTrue(boolean0);
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      
      boolean boolean1 = tiger0.selfTest();
      assertTrue(boolean1);
      assertEquals("tiger", tiger0.name());
      assertEquals(24, tiger0.hashSize());
      assertEquals(64, tiger0.blockSize());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Tiger tiger0 = new Tiger();
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertNotNull(tiger0);
      
      Tiger tiger1 = (Tiger)tiger0.clone();
      assertEquals(24, tiger0.hashSize());
      assertEquals("tiger", tiger0.name());
      assertEquals(64, tiger0.blockSize());
      assertEquals(64, tiger1.blockSize());
      assertEquals("tiger", tiger1.name());
      assertEquals(24, tiger1.hashSize());
      assertNotSame(tiger0, tiger1);
      assertNotSame(tiger1, tiger0);
      assertFalse(tiger1.equals((Object)tiger0));
      assertNotNull(tiger1);
  }
}
