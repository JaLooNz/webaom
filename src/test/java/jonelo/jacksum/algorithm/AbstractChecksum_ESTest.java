/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 13 20:08:06 GMT 2018
 */

package jonelo.jacksum.algorithm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.NoSuchAlgorithmException;
import jonelo.jacksum.algorithm.AbstractChecksum;
import jonelo.jacksum.algorithm.Crc32;
import jonelo.jacksum.algorithm.Edonkey;
import jonelo.jacksum.algorithm.MD;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractChecksum_ESTest extends AbstractChecksum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      String string0 = crc32_0.getHexValue();
      assertEquals("00000000", string0);
      assertNotNull(string0);
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.uppercase = true;
      assertEquals(0L, crc32_0.getValue());
      
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      int int0 = (-287);
      // Undeclared exception!
      AbstractChecksum.hexformat((-287), 1518500249);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      // Undeclared exception!
      try { 
        crc32_0.update((byte[]) null, 3652, 3652);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = AbstractChecksum.hexformat((-2164L), 1962);
      assertNotNull(string0);
      
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)0;
      edonkey0.uppercase = true;
      assertEquals(0L, edonkey0.getValue());
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-10);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-10);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-25);
      edonkey0.update(byteArray1, 352, 0);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-10), (byte)0, (byte) (-10), (byte)1, (byte) (-25)}, byteArray1);
      assertEquals(0L, edonkey0.getValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[2] = (byte) (-100);
      edonkey0.update(byteArray0, (int) (byte) (-100), (int) (byte) (-100));
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)0, (byte) (-100)}, byteArray0);
      assertEquals(0L, edonkey0.getValue());
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        edonkey0.update(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.length = 0L;
      assertEquals(0L, edonkey0.getValue());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-20);
      edonkey0.uppercase = true;
      assertEquals(0L, edonkey0.getValue());
      
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)117;
      edonkey0.update((byte) (-20));
      assertEquals(0L, edonkey0.getValue());
      
      byteArray0[4] = (byte)0;
      String string0 = AbstractChecksum.format(byteArray0, true);
      assertEquals(6, byteArray0.length);
      assertEquals("30ECA1750000", string0);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-20), (byte) (-95), (byte)117, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      edonkey0.length = (long) (byte)15;
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.update((byte) (-95));
      assertEquals(0L, edonkey0.getValue());
      
      byteArray0[5] = (byte)15;
      edonkey0.update(byteArray0, (int) (byte)0, (int) (byte) (-95));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)48, (byte) (-20), (byte) (-95), (byte)117, (byte)0, (byte)15}, byteArray0);
      assertEquals(0L, edonkey0.getValue());
      
      // Undeclared exception!
      try { 
        edonkey0.update((byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -29
         //
         verifyException("gnu.crypto.hash.BaseHash", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = AbstractChecksum.hexformat(0L, (-1));
      assertEquals("0", string0);
      assertNotNull(string0);
      
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      crc32_0.update(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)8, (byte)114, (byte)1, (byte)0}, byteArray0);
      assertEquals(2493378967L, crc32_0.getValue());
      
      String string1 = AbstractChecksum.format((byte[]) null, true);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      crc32_0.reset();
      assertEquals(0L, crc32_0.getValue());
      
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.uppercase = true;
      assertEquals(0L, edonkey0.getValue());
      
      String string2 = edonkey0.getHexValue();
      assertEquals("31D6CFE0D16AE931B73C59D7E0C089C0", string2);
      assertNotNull(string2);
      assertEquals(0L, edonkey0.getValue());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      edonkey0.length = (-1929L);
      assertEquals(0L, edonkey0.getValue());
      
      String string3 = AbstractChecksum.hexformat(25L, (byte)93);
      assertEquals("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      edonkey0.update((byte)93);
      assertEquals(0L, edonkey0.getValue());
      
      long long0 = edonkey0.getValue();
      assertEquals(0L, long0);
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.update(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)8, (byte)114, (byte)1, (byte)0}, byteArray0);
      assertEquals(0L, edonkey0.getValue());
      
      String string4 = edonkey0.getHexValue();
      assertEquals("10DE740D195166D0D6AC529D3EF83FD6", string4);
      assertNotNull(string4);
      assertEquals(0L, edonkey0.getValue());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.value = (-42L);
      assertEquals((-42L), edonkey0.getValue());
      
      edonkey0.length = 0L;
      assertEquals((-42L), edonkey0.getValue());
      
      edonkey0.value = (-1043L);
      assertEquals((-1043L), edonkey0.getValue());
      
      String string0 = edonkey0.getHexValue();
      assertEquals("31d6cfe0d16ae931b73c59d7e0c089c0", string0);
      assertNotNull(string0);
      assertEquals((-1043L), edonkey0.getValue());
      
      long long0 = edonkey0.getValue();
      assertEquals((-1043L), long0);
      assertEquals((-1043L), edonkey0.getValue());
      
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      int int0 = 3143;
      // Undeclared exception!
      try { 
        crc32_0.update(byteArray0, (int) (byte)10, 3143);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      String string0 = edonkey0.getHexValue();
      assertEquals("31d6cfe0d16ae931b73c59d7e0c089c0", string0);
      assertNotNull(string0);
      assertEquals(0L, edonkey0.getValue());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      edonkey0.update(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      assertEquals(0L, edonkey0.getValue());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      edonkey0.length = 4463L;
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.value = 0L;
      assertEquals(0L, edonkey0.getValue());
      
      String string1 = AbstractChecksum.format(byteArray1, true);
      assertEquals(0, byteArray1.length);
      assertEquals("", string1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(string1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = AbstractChecksum.format(byteArray1, true);
      assertEquals(0, byteArray1.length);
      assertEquals("", string2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(string2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long long0 = edonkey0.getValue();
      assertEquals(0L, long0);
      assertEquals(0L, edonkey0.getValue());
      
      MD mD0 = null;
      try {
        mD0 = new MD("jonelo.jacksum.algorithm.MD");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.reset();
      assertEquals(0L, crc32_0.getValue());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      crc32_0.update(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)15, (byte)1, (byte)1}, byteArray0);
      assertEquals(3523407757L, crc32_0.getValue());
      
      crc32_0.update((byte)54);
      assertEquals(2388887398L, crc32_0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      edonkey0.length = (long) (byte)58;
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.update(byteArray0, (int) (byte)58, (-350));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, edonkey0.getValue());
      
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)0;
      edonkey0.value = (-1L);
      assertEquals((-1L), edonkey0.getValue());
      
      edonkey0.update(byteArray0, 16, 0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)58, (byte)53, (byte)11, (byte) (-1), (byte) (-95), (byte)0}, byteArray0);
      assertEquals((-1L), edonkey0.getValue());
      
      // Undeclared exception!
      try { 
        edonkey0.getHexValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      byte[] byteArray0 = new byte[0];
      String string0 = AbstractChecksum.format(byteArray0, true);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      
      crc32_0.value = 1845L;
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.update(2682);
      assertEquals(1657960367L, crc32_0.getValue());
      
      crc32_0.reset();
      assertEquals(0L, crc32_0.getValue());
      
      long long0 = crc32_0.getValue();
      assertEquals(0L, long0);
      assertEquals(0L, crc32_0.getValue());
      
      // Undeclared exception!
      try { 
        crc32_0.update((byte[]) null, 2682, (-421));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.uppercase = true;
      assertEquals(0L, crc32_0.getValue());
      
      int int0 = 1632;
      crc32_0.update(1632);
      assertEquals(2679148245L, crc32_0.getValue());
      
      crc32_0.length = (-2651L);
      assertEquals(2679148245L, crc32_0.getValue());
      
      crc32_0.uppercase = true;
      assertEquals(2679148245L, crc32_0.getValue());
      
      crc32_0.reset();
      assertEquals(0L, crc32_0.getValue());
      
      byte[] byteArray0 = new byte[0];
      crc32_0.update(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.reset();
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.update((byte)0);
      assertEquals(3523407757L, crc32_0.getValue());
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      String string0 = AbstractChecksum.format(byteArray1, true);
      assertEquals(6, byteArray1.length);
      assertEquals("000000000000", string0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(string0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      crc32_0.update(byteArray1);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2641158014L, crc32_0.getValue());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      crc32_0.update((byte)0);
      assertEquals(1696784233L, crc32_0.getValue());
      
      long long0 = crc32_0.getValue();
      assertEquals(1696784233L, long0);
      assertEquals(1696784233L, crc32_0.getValue());
      
      long long1 = crc32_0.getValue();
      assertEquals(1696784233L, long1);
      assertEquals(1696784233L, crc32_0.getValue());
      assertTrue(long1 == long0);
      
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.update(1632);
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.reset();
      assertEquals(0L, edonkey0.getValue());
      
      // Undeclared exception!
      try { 
        crc32_0.update(byteArray1, (-31), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.CRC32", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.value = 2135L;
      assertEquals(0L, crc32_0.getValue());
      
      crc32_0.length = 0L;
      assertEquals(0L, crc32_0.getValue());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-16);
      byteArray0[0] = (byte) (-16);
      crc32_0.reset();
      assertEquals(0L, crc32_0.getValue());
      
      byte byte1 = (byte)121;
      byteArray0[1] = (byte)121;
      crc32_0.update(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)121, (byte)0}, byteArray0);
      assertEquals(3027789949L, crc32_0.getValue());
      
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      crc32_0.update(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)121, (byte)0}, byteArray0);
      assertEquals(464227179L, crc32_0.getValue());
      
      crc32_0.value = 0L;
      assertEquals(464227179L, crc32_0.getValue());
      
      String string0 = crc32_0.getHexValue();
      assertEquals("1bab8b6b", string0);
      assertNotNull(string0);
      assertEquals(464227179L, crc32_0.getValue());
      
      String string1 = crc32_0.getHexValue();
      assertEquals("1bab8b6b", string1);
      assertNotNull(string1);
      assertEquals(464227179L, crc32_0.getValue());
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        crc32_0.update((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jonelo.jacksum.algorithm.AbstractChecksum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      String string0 = AbstractChecksum.format(byteArray0, false);
      assertEquals(1, byteArray0.length);
      assertEquals("b1", string0);
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      String string0 = edonkey0.getHexValue();
      assertEquals("31d6cfe0d16ae931b73c59d7e0c089c0", string0);
      assertNotNull(string0);
      assertEquals(0L, edonkey0.getValue());
      
      long long0 = edonkey0.getValue();
      assertEquals(0L, long0);
      assertEquals(0L, edonkey0.getValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      assertNotNull(edonkey0);
      assertEquals(0L, edonkey0.getValue());
      
      edonkey0.update((-1661));
      assertEquals(0L, edonkey0.getValue());
      
      byte[] byteArray0 = new byte[0];
      edonkey0.update(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0L, edonkey0.getValue());
      
      Crc32 crc32_0 = new Crc32();
      assertNotNull(crc32_0);
      assertEquals(0L, crc32_0.getValue());
      
      long long0 = crc32_0.getValue();
      assertEquals(0L, long0);
      assertEquals(0L, crc32_0.getValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      edonkey0.length = (-3291L);
      edonkey0.uppercase = false;
      edonkey0.update(0);
      edonkey0.reset();
      edonkey0.update((byte)0);
      String string0 = AbstractChecksum.hexformat(9728000L, 1127);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      crc32_0.length = 1L;
      crc32_0.update(2161);
      crc32_0.update(847);
      crc32_0.update((byte)0);
      assertEquals(3717433535L, crc32_0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractChecksum.hexformat((-334L), (-1195));
      MD mD0 = null;
      try {
        mD0 = new MD("");
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      edonkey0.update(1536);
      assertEquals(0L, edonkey0.getValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      crc32_0.update(byteArray0);
      String string0 = AbstractChecksum.format(byteArray0, true);
      assertEquals("0000000000", string0);
      
      crc32_0.reset();
      String string1 = crc32_0.getHexValue();
      assertEquals("00000000", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = AbstractChecksum.format(byteArray0, false);
      assertEquals("00", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Edonkey edonkey0 = new Edonkey();
      edonkey0.update(2);
      long long0 = edonkey0.getValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = AbstractChecksum.format((byte[]) null, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Crc32 crc32_0 = new Crc32();
      crc32_0.update((byte) (-8));
      assertEquals(1633981859L, crc32_0.getValue());
  }
}
